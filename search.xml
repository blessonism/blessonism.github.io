<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>三小</title>
      <link href="/2023/03/11/%E4%B8%89%E5%B0%8F/"/>
      <url>/2023/03/11/%E4%B8%89%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<p>组队人员选取模式</p><ol><li>推荐式组队</li><li>按班排组队</li></ol><p>成员分工：</p><ul><li><p>前期</p><ul><li><p>一星期各收集至少一个有亮点的项目，开会汇报并介绍（可以是小工具，也可以是规模较大的项目，要敢想）</p><p>文稿负责人记录并润色</p></li><li><p>word文档（2人各整理一份申报书，需要多次修改由简到繁再到简）（加入一些思维模型，参考文献等一系列美化文档措施）</p></li><li><p>ppt制作（有亮点类似于产品发布会那种，建议适当加入ppt动画，参考淘宝科技产品h5，2-3人各制作一份）</p></li><li><p>汇报人（宣讲人）word文档大致完成后各成员准备一份宣讲稿，最后采用投票制选取汇报效果最佳的成员</p></li></ul></li><li><p>中后期</p><ul><li>git工具掌握</li><li>前端开发（http， css， JS及其框架）</li><li>后端开发</li></ul></li></ul><p>尽可能形成较为积极的团队环境，多沟通交流，除项目外碰到的问题及在项目学习中发现的优质资源</p><p>以项目小组为基点，组成学习小组</p><p><strong>PART 1:</strong></p><ul><li><strong>目标用户和需求</strong>：确定你的软件的目标用户，他们需要什么样的功能和特性，以及项目如何满足目标用户的需求。</li><li>项目的市场前景，目标和愿景：项目的市场规模和增长潜力，项目的主要目标和愿景，让对方了解项目的价值和意义。</li><li><strong>项目的竞争情况和优势</strong>：介绍你的项目的竞争优势，例如技术、专利、团队经验等方面。</li><li><strong>项目的创新点</strong>：需要明确项目的创新点是什么，与现有产品或服务相比，它有什么独特之处，或者这种创新能够带来什么样的商业机会或者能够解决哪些问题</li><li><em>技术选型</em>：选择最适合你项目的编程语言、开发框架、数据库等技术。（大致了解一下）</li><li><em>设计和架构</em>：确定软件的整体设计和架构，包括数据库模式、API接口设计、UI设计等。（大致了解一下）</li></ul><hr><p>**PART 2:**（负责文稿的同学大致学习相关申报书以下方面的框架以及怎样能写更亮眼，本周主要工作还是提出项目idea）</p><ul><li><strong>测试和发布</strong>：考虑软件测试的流程和方法，并制定软件发布计划。</li><li><strong>项目的核心功能和技术特点</strong></li><li><strong>项目的商业计划和预期收益</strong></li><li><em>商业模式</em>：需要明确项目的商业模式是什么，如何获得收益，以及如何保证项目的可持续性。</li><li><strong>开发周期和预算</strong>：确定开发周期和项目预算，这将影响你的软件功能和设计的复杂程度。</li><li><em>风险评估</em>：需要对项目可能面临的风险进行评估和规划，以及如何减少和应对这些风险。</li><li><em>项目的进展情况</em>：投资人需要知道项目的当前进展情况，包括已经完成的工作、未来计划的工作和预计的时间表。</li><li><strong>团队介绍</strong>：你需要向投资人介绍项目的团队，包括团队成员的背景和经验，以及他们对项目的贡献和责任。</li></ul><hr><p><strong>Title</strong>：</p><ol><li>突破人工限制：探索自动化PPT制作的新前沿</li><li>智能化升级：让PPT制作更加高效化</li><li>高效办公新选择：自动化PPT制作软件</li><li>基于自动化技术的高效PPT制作软件设计</li><li>自动化PPT制作软件：轻松打造出专业级演示文稿</li></ol><p><strong>目标用户和需求</strong>： </p><p>​本软件的目标用户为需要频繁制作ppt的教师、学生、商务人士和其他需要用到ppt的人群。他们需要一个简单易用、自动生成ppt的软件，能够快速生成符合他们需求的ppt，减少他们的制作时间和精力成本。本软件还需要支持多种主题模板、插入图片、视频、表格等常见功能，以及灵活的编辑选项，让用户能够自由定制ppt内容，满足不同场景的需求。</p><p><strong>项目的市场前景，目标和愿景</strong>： </p><p>​随着信息化技术的发展，ppt已经成为一种不可或缺的展示工具。据调查，全球每天都有数百万份ppt被制作和展示。而目前市场上自动生成ppt的软件仍较为匮乏，因此，本项目具有较大的市场潜力。我们的目标是成为一个全球性的自动生成ppt软件，让用户可以更快速、高效地制作自己需要的ppt。</p><p>项目的竞争情况和优势：</p><p>​目前市面上已经有不少ppt制作软件，例如PowerPoint、Prezi等，但这些软件都需要用户自己手动添加内容，制作时间较长，操作繁琐。而我们的自动生成ppt软件将使用人工智能技术，通过用户提供的关键词和信息，自动生成符合用户需求的ppt，极大地缩短制作时间。此外，我们的软件将支持多种主题模板、插入图片、视频、表格等常见功能，丰富用户的选择，让用户更加轻松地制作自己需要的ppt。</p><p><strong>项目的创新点</strong>： </p><p>​本软件的创新点在于使用人工智能技术自动生成ppt内容，将用户从繁琐的手动编辑中解放出来，大幅提高制作效率。此外，本软件还将提供多种主题模板和插件功能，让用户可以更加轻松地定制ppt内容，使得用户可以更加快速、方便地制作自己需要的ppt。</p><p><strong>技术选型</strong>： </p><p>​我们计划使用Python编程语言、Django框架和MySQL数据库来实现本软件。Python是一种易于学习、功能强大的编程语言，可以用于处理大量数据和人工智能技术的开发。Django是一个开源的Web应用程序框架，可以帮助我们更加快速地构建Web应用程序。MySQL是一种广泛使用的关系型数据库，可以存储大量的数据，并提供高效的查询和管理功能。</p><p><strong>技术选型</strong>：</p><p>​为了实现自动生成ppt的功能，可以选择使用Python作为编程语言，并利用Python中的各种库和框架，如Pandas、Numpy、Matplotlib、OpenCV等来处理数据和图像，利用Python中的GUI库，如Tkinter或PyQt等来实现用户界面。</p><p><strong>设计和架构</strong>：</p><p>​首先，我们需要设计一个简洁直观的用户界面，让用户能够快速上手并能够方便地操作软件。界面应该包括功能选择、模板选择、数据输入、数据可视化等模块。</p><p>其次，我们需要设计一个数据处理模块，可以读取用户输入的数据，处理并分析数据，提取数据中的关键信息，并自动化地生成相应的ppt模板。在数据处理模块中，可以利用Pandas库来处理Excel表格中的数据，利用Numpy库进行数据的统计分析，利用Matplotlib库进行数据可视化，利用OpenCV库对图片进行处理等。</p><p>最后，我们需要设计一个PPT自动生成模块，将数据处理模块处理得到的结果与ppt模板相结合，生成最终的ppt文档。在PPT自动生成模块中，可以利用Python中的PPTX库来实现ppt的自动生成。</p><p>总体来说，这个软件的核心功能是自动生成ppt，因此在设计和架构时需要充分考虑用户需求，并且需要注重界面设计和数据处理能力的提高。同时，还需要保证软件的易用性和稳定性，提供完善的用户文档和技术支持，以满足用户的需求并不断提高用户的体验。</p><hr><p><strong>Title：</strong></p><ol><li><p>一站式服务：校园实习和志愿者招募的综合平台</p></li><li><p>基于多功能平台的校园实习和志愿者招募一体化平台</p></li><li><p>便捷的校园实习和志愿者招募平台：集成多项功能，提高服务效率</p></li><li><p>聚焦校园实习和志愿者招募的多维度多目标优化平台</p></li><li><p>可持续发展的校园实习和志愿者招募平台：促进社会参与和人才培养</p></li><li><p>智能化管理的校园实习和志愿者招募平台：提供全方位服务，实现优化升级</p></li></ol><p><strong>目标用户和需求：</strong></p><p>​该应用的目标用户为学生、志愿者和自习室管理员。学生和志愿者需要能够方便地查找、报名和管理实习机会和志愿服务，自习室管理员需要能够轻松管理自习室的入场和使用情况。因此，该应用需要提供以下功能：</p><ul><li>实习和志愿者招募信息的发布和查询</li><li>实习和志愿者申请和管理</li><li>自习室信息的发布和查询</li><li>自习室入场和使用管理</li></ul><p><strong>市场前景，目标和愿景：</strong> </p><p>​该应用的市场潜力非常大，因为学生和志愿者是一个庞大的用户群体，而且自习室管理也是一个非常具有需求的领域。该应用的主要目标是通过提供方便快捷的实习和志愿服务、自习室管理，为用户带来更好的体验和服务。我们的愿景是成为全国领先的学生实习管理平台和自习室管理应用。</p><p><strong>项目的竞争情况和优势：</strong> </p><p>​目前市面上已经有一些实习管理平台和自习室管理应用，但是它们往往只提供单一功能，缺乏综合性和创新性。我们的应用将实习管理平台和自习室管理应用结合在一起，提供全面的服务。此外，我们的应用还有以下优势：</p><ul><li>强大的用户管理系统和数据分析功能</li><li>高效的自习室管理系统和入场管理系统</li><li>智能化的推荐系统，能够为用户提供更加符合其需求的实习和志愿机会</li></ul><p><strong>项目的创新点：</strong> </p><p>​该应用的创新点主要体现在以下几个方面：</p><ul><li>集成实习管理平台和自习室管理应用为一体，提供全方位服务</li><li>引入人工智能技术，为用户推荐最符合需求的实习和志愿机会</li><li>提供智能化的自习室入场管理系统，使管理更加高效</li></ul><p><strong>技术选型：</strong> </p><p>​为了满足应用的需求，我们计划采用以下技术：</p><ul><li>编程语言：Java</li><li>开发框架：Spring Boot、Vue.js</li><li>数据库：MySQL</li></ul><p><strong>设计和架构：</strong> </p><p>​应用的整体设计和架构如下：</p><ul><li>前端UI设计：基于Vue.js开发，实现了简洁易用的用户界面和交互设计</li><li>后端API接口设计：基于Spring Boot框架，实现了用户管理、实习管理、自习室管理</li></ul><p><strong>技术选型：</strong></p><ul><li>前端框架：React Native</li><li>后端框架：Django</li><li>数据库：MySQL</li><li>服务器：AWS</li></ul><p><strong>设计和架构：</strong></p><p>​该应用主要包括三个模块：实习管理平台、志愿者招募平台、自习室管理模块。其中实习管理平台包括实习岗位发布、实习生招聘、实习生管理等功能；志愿者招募平台包括志愿者招募发布、志愿者申请、志愿者管理等功能；自习室管理模块包括自习室预约、座位管理、实时监测等功能。</p><p>该应用的创新点在于将实习管理、志愿者招募和自习室管理三个功能集成到一个应用中，方便用户一站式解决多个问题。同时，应用还采用了实时监测技术，用户可以通过应用实时查看自习室座位情况，避免浪费时间到了自习室却没有座位的尴尬情况。</p><p>此外，应用还将使用人工智能技术对实习生、志愿者和自习室进行匹配，提高匹配效率和成功率，提高用户体验。</p><p><strong>数据库设计：</strong></p><p>​使用MySQL数据库，设计了用户、实习、自习室等相关数据表，实现了数据存储和管理</p><p><strong>移动端开发：</strong></p><p>​基于React Native开发，实现了与后端API接口的交互，提供了丰富的移动端功能和体验</p><p>该应用的主要创新点包括：</p><ol><li>综合管理：该应用集合了实习管理、志愿者招募和自习室管理等多种功能，为用户提供了更加全面的服务，满足了不同用户的不同需求。</li><li>个性化推荐：该应用基于用户的兴趣、专业和经验等信息，为用户提供个性化的实习推荐和志愿者招募信息，提高了匹配度和用户满意度。</li><li>移动端应用：该应用基于React Native开发，具有跨平台、轻量级、易用性强等优点，为用户提供了更加便捷的使用体验，适合于现代移动化的使用场景。</li><li>数据可视化：该应用实现了数据可视化功能，为用户提供了丰富的数据图表和报表展示，帮助用户更好地理解和分析实习和自习室管理的数据信息，提高了用户决策的准确性和效率。</li></ol><p>综上所述，该应用的设计和架构具有良好的可扩展性和可维护性，创新性和实用性较高，能够为用户提供更加优质和全面的服务，具有良好的市场前景和发展潜力。</p><hr><p><strong>Title：</strong></p><ol><li>基于人工智能的英语背单词系统：高效学习的理论与实践</li><li>英语背单词的高效性：人工智能辅助学习的研究与应用</li><li>人工智能技术在英语背单词中的应用：高效学习的挑战与机遇</li><li>探究英语背单词高效学习的人工智能方法</li><li>人工智能驱动下的英语背单词应用：高效学习的新视角</li><li>基于人工智能技术的英语单词背诵系统：高效、个性化的学习体验</li><li>突破英语背单词瓶颈：高效人工智能助力</li></ol><p><strong>目标用户和需求：</strong> </p><p>​该软件的目标用户是所有需要背英语单词的人，无论是学生、职场人士还是自学者。用户需要一种能够自动检测出顽固单词并给出针对性记忆建议的背单词工具，帮助他们更好地掌握单词记忆技巧，提高背诵效率和记忆效果。</p><p>​本软件的目标用户主要是英语学习者，包括学生、职场人士和自学者等。他们需要一个能够帮助他们有效地背单词和提高英语水平的软件。因此，本软件具备艾宾浩斯遗忘曲线、生成短文小故事、语音朗读能、单词游戏和用户社区等功能。这些功能和特性能够满足目标用户对于学习英语的需求，帮助他们更加高效地背单词，提高学习成效。</p><p><strong>项目的市场前景、目标和愿景：</strong> </p><p>​英语学习是当前全球最大的语言学习市场之一，因此该软件具有非常广阔的市场前景和增长潜力。该软件的目标是为广大英语学习者提供一种高效、便捷、个性化的背单词工具，帮助他们轻松掌握单词记忆技巧，从而更快地提高英语学习成绩和应用能力。</p><p>​英语学习市场是一个巨大的市场，尤其在中国，由于国际化的趋势，越来越多的人开始学习英语，因此该市场有着很大的潜力。我们的项目主要目标是成为市场上最受欢迎和最有效的英语学习软件。我们希望通过提供高效、实用和有趣的功能和特性，为用户提供更好的学习体验，并不断优化和改进软件，使其成为学习英语的首选工具。</p><p><strong>项目的竞争情况和优势：</strong> </p><p>​目前市场上已经有很多背单词软件，但是大多数都只提供传统的单词背诵功能，缺乏个性化、针对性的背诵建议，无法真正帮助用户提高背诵效率和记忆效果。而我们的软件不仅可以根据艾宾浩斯遗忘曲线检测出用户的顽固单词，并且通过AI生成短文小故事来帮助用户巩固记忆，大大提高了用户的背诵效率和记忆效果。</p><p>市场上已经有很多英语学习软件，但我们的软件有以下优势：</p><ol><li>利用艾宾浩斯遗忘曲线原理，为用户定制学习计划，减少遗忘率，提高学习效果；</li><li>生成与选中单词相关的短文小故事，使学习更生动有趣，帮助用户更好地理解和记忆单词；</li><li>语音朗读功能，帮助用户更好地理解单词的发音和音调，并提高其语音表达能力；</li><li>单词游戏功能，增加学习乐趣，提高用户的学习动力，使学习更加轻松愉悦；</li><li>用户社区功能，增加学习的互动性和趣味性，让用户相互交流学习心得和方法，共同提高学习效果。</li></ol><p><strong>创新点总结：</strong></p><ul><li>艾宾浩斯遗忘曲线功能：该功能通过利用遗忘曲线的原理，为用户定制学习计划，帮助用户科学高效地背单词，并减少遗忘率，增加学习效果。</li><li>生成短文小故事功能：该功能可以为用户生成与选中单词相关的短文小故事，使学习更生动有趣，帮助用户更好地理解和记忆单词。</li><li>语音朗读功能：该功能可以帮助用户更好地理解单词的发音和音调，并提高其语音表达能力，使学习更加全面。</li><li>单词游戏功能：该功能通过游戏的方式增加学习乐趣，提高用户的学习动力，使学习更加轻松愉悦。</li><li>用户社区功能：该功能可以让用户相互交流学习心得和方法，共同提高学习效果，增加学习的互动性和趣味性。</li></ul><p><strong>技术选型：</strong></p><p>为了实现这些功能，可以选择以下技术：</p><ul><li><p>编程语言：Java或Python</p></li><li><p>前端框架：React或Vue.js</p></li><li><p>后端框架：Spring Boot或Django</p></li><li><p>数据库：MySQL或PostgreSQL</p><p>其中，Java和Spring Boot作为企业级开发的主流技术，具有成熟的生态系统和强大的稳定性；Python和Django则更加适合快速开发，而且拥有丰富的第三方库和框架支持。React和Vue.js则是现在前端开发的主流技术，都拥有易用性和可拓展性的优点。MySQL和PostgreSQL则是两种广泛使用的关系型数据库，都可以很好地满足软件的需求。</p></li></ul><p><strong>设计和架构：</strong></p><p>该软件的整体设计和架构如下：</p><p>​<strong>前端UI设计：</strong></p><p>​基于React或Vue.js框架，实现了简洁易用的用户界面和交互设计，包括艾宾浩斯遗忘曲线、生成短文小故事、语音朗读、单词游戏、用户社区等功能。</p><p>​<strong>后端API接口设计：</strong></p><p>​基于Spring Boot或Django框架，实现了用户管理、单词管理、学习计划管理、单词游戏管理、用户社区管理等功能，并与前端交互实现数据传输。</p><p>​<strong>数据库设计：</strong></p><p>​选择MySQL或PostgreSQL关系型数据库，建立用户表、单词表、学习计划表、单词游戏表、用户社区表等。</p><p>​综上所述，该软件的目标用户是英语学习者，他们需要高效、有趣、全面的背单词软件，以帮助他们更好地掌握单词，提高英语水平。该软件的市场前景非常广阔，随着全球化的发展，英语作为国际通用语言，越来越多的人开始学习英语，英语教育市场呈现出快速增长的趋势。该软件的目标是成为最优秀的英语背单词软件，通过艾宾浩斯遗忘曲线、生成短文小故事、语音朗读、单词游戏、用户社区等创新功能，满足用户高效、有趣、全面的学习需求。与现有的英语背单词软件相比，该软件具有创新的背单词方式和多种有趣的学习功能，可以更好地提高用户的学习兴趣和学习效果。</p><p><strong>创新点：</strong></p><ol><li>艾宾浩斯遗忘曲线检测：利用艾宾浩斯遗忘曲线原理，智能检测用户背单词的遗忘情况，并针对性地生成记忆建议，提高记忆效果。</li><li>AI小故事生成：基于AI技术，智能根据用户选择的顽固单词生成短文小故事，帮助用户更好地理解和记忆单词。</li><li>音频发音：提供多种真人发音和语音识别功能，让用户更好地掌握单词的发音和应用。</li><li>单词积累：提供多种单词积累方式，如单词本、单词卡片等，方便用户随时随地背诵单词。</li><li>多种背诵模式：提供多种背诵模式，如卡片模式、抽测模式等，满足不同用户的背诵需</li><li>语音朗读功能：该功能可以帮助用户更好地理解单词的发音和音调，并提高其语音表达能力。此外，用户可以自行录入单词发音以纠正不标准的发音。</li><li>单词游戏功能：该功能可以让用户在轻松愉悦的氛围中学习单词，提高学习兴趣和参与度。例如，单词接龙、填空游戏等，通过互动游戏的方式增强用户的学习动力。</li><li>用户社区功能：该功能可以让用户之间相互分享学习心得、交流学习方法，共同提高学习效果。用户还可以在社区中进行挑战赛，增加学习乐趣，提高学习兴趣。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> 三小 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程</title>
      <link href="/2023/03/11/01-29-%E9%BB%91%E9%A9%AC%E7%BA%BF%E7%A8%8B/"/>
      <url>/2023/03/11/01-29-%E9%BB%91%E9%A9%AC%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="多线程的实现方式-1-："><a href="#多线程的实现方式-1-：" class="headerlink" title="多线程的实现方式(1)："></a>多线程的实现方式(1)：</h2><blockquote><ul><li>将类声明为Thread的子类；</li><li>该子类应重写Thread的run方法；</li><li>分配并启动子类的实例</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, i &lt; <span class="number">100</span>, i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建线程实例</span></span><br><span class="line"><span class="type">ThreadDemo</span> <span class="variable">td</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadDemo</span>();</span><br><span class="line"><span class="comment">//启动线程</span></span><br><span class="line">td.start();</span><br><span class="line"></span><br><span class="line"><span class="type">ThreadDemo</span> <span class="variable">td2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadDemo</span>();</span><br><span class="line">td2.start();</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">Thread</span><br><span class="line">String <span class="title function_">getName</span><span class="params">()</span><span class="comment">//返回该线程的名称</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">steName</span><span class="params">(String name)</span> <span class="comment">//改变线程名称，使之与参数name相同</span></span><br></pre></td></tr></table></figure><h2 id="多线程的实现方式-2-："><a href="#多线程的实现方式-2-：" class="headerlink" title="多线程的实现方式(2)："></a>多线程的实现方式(2)：</h2><blockquote><ul><li>声明实现Runnable接口的类</li><li>该类实现run方法</li><li>分配并启动子类的实例</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadDemo2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, i &lt; <span class="number">100</span>, i++) &#123;</span><br><span class="line">            <span class="comment">//获取当前线程</span></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">            System.out.println(t.getName + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            <span class="comment">//System.out.println(Thread.currentThread().getName() + &quot;:&quot; + i);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ThreadDemo2</span> <span class="variable">td</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadDemo2</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(td);</span><br><span class="line">t.setName(<span class="string">&quot;feiwu&quot;</span>);</span><br><span class="line">t.start();</span><br><span class="line"></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(td);</span><br><span class="line">t2.setName(<span class="string">&quot;kkk&quot;</span>);</span><br><span class="line">t2.start();</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">Thread(Runnable target);</span><br><span class="line"><span class="keyword">static</span> Thread <span class="title function_">currenThread</span><span class="params">()</span>; <span class="comment">//返回当前线程对象</span></span><br></pre></td></tr></table></figure><blockquote><p>方法二异于方法一在：</p><p>方法二中的多线程共用同一个Runnable对象。</p></blockquote><p>java是单一继承机制，若想继承除Thread外的其他类，只能通过方法二实现Runnable接口</p><hr><h2 id="案例：模拟火车站售票"><a href="#案例：模拟火车站售票" class="headerlink" title="案例：模拟火车站售票"></a>案例：模拟火车站售票</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Main</span><span class="params">(Stirng[] args)</span>&#123;</span><br><span class="line"><span class="type">TicketThread</span> <span class="variable">tt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketThread</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tt);</span><br><span class="line">t.setName(<span class="string">&quot;窗口一&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tt);</span><br><span class="line">t.setName(<span class="string">&quot;窗口二&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tt);</span><br><span class="line">t.setName(<span class="string">&quot;窗口三&quot;</span>);</span><br><span class="line"></span><br><span class="line">t.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadDemo2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">ticketNum</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    While(ture) &#123;</span><br><span class="line">    <span class="keyword">if</span>(ticketNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + ticket--);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">long</span> millis)</span> <span class="comment">//让当前线程睡一会，调用sleep方法需要捕获异常</span></span><br><span class="line"><span class="comment">//若在ThreadDemo2 中的if语句后加入sleep方法，会造成最后票剩余-1，-2的情况，以及同一张票会重复售出</span></span><br></pre></td></tr></table></figure><blockquote><p>多线程操作同一个数据会造成不安全的问题</p></blockquote><hr><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p><code>synchronized</code>同步（锁🔒），可以修饰代码块和方法，被修饰的代码块和方法一旦被某个线程访问，则直接锁住，其他的线程将无法访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步代码块：</span></span><br><span class="line"><span class="keyword">synchronized</span>(锁对象) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//注意：锁对象需要被所有的线程所共享</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadDemo2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">ticketNum</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    While(ture) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(obj) &#123;</span><br><span class="line">                <span class="keyword">if</span>(ticketNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; </span><br><span class="line">                        System.out.print(<span class="string">&quot;InterruptedException&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + ticket--);</span><br><span class="line">    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//sychronized 可以用来修饰方法</span></span><br><span class="line">        <span class="comment">//非静态的锁对象是this</span></span><br><span class="line">        <span class="comment">//静态的锁对象是当前类的字节码对象</span></span><br><span class="line">        <span class="comment">//同步方法：使用关键字sychronized修饰的方法，一旦被一个线程访问，则整个方法全部锁住</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同步：安全性高，效率低</span></span><br><span class="line"><span class="comment">//非同步：效率高，安全性低</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>输入输出流</title>
      <link href="/2023/03/11/01-28-%E9%BB%91%E9%A9%AC%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/"/>
      <url>/2023/03/11/01-28-%E9%BB%91%E9%A9%AC%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流:"></a>标准输入输出流:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> InputStream in <span class="comment">//字节输入流，用来读取键盘录入的数据</span></span><br><span class="line"><span class="type">InputStram</span> <span class="variable">is</span> <span class="operator">=</span> System.in;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span> (System.in);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> printStream out <span class="comment">//字节输出流，将数据输出到命令行</span></span><br><span class="line">System.out.Println();</span><br></pre></td></tr></table></figure><hr><p><em>由于标准输出流是一个字节输出流，所以只能输出字节或者字节数组，但是我们读取到的数据则是字符串，如果想进行输出还需要转换成字节数组。</em></p><p><code>OutputStreamWriter</code>（转换器） 是字符流通向字节流的桥梁（字节流转换成字符流？）</p><p>为了获得最高效率，可考虑将<code>OutputStreamWriter</code>包装到<code>BufferedWriter</code>中，以避免频繁调用转换器。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Writer</span> <span class="variable">w</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out);<span class="comment">//父类型引用指向子类对象</span></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out));</span><br></pre></td></tr></table></figure><hr><h2 id="打印流："><a href="#打印流：" class="headerlink" title="打印流："></a>打印流：</h2><p><code>printStream</code>（字节） , <code>printWriter</code>（字符）</p><p>为其他输出流添加量功能，使他们能够方便地打印各种数据值表示形式。</p><p><code>printStream</code>特点：</p><p>（1）只负责数据的输出，不负责数据的读取。<br>（2）与其他输出流不用，<code>printStream</code>永远不会抛出<code>IOException</code><br>（3）有特有的方法：<code>void print</code> (任意类型的值）<code>void println</code> (任意类型的值并换行）</p><blockquote><p>注意：（1）如果使用继承父类的write方法写数据，那么查看数据的时候会查询编码表<br>（2）如果使用自己的特有的方法<code>print/println</code>方法写数据，写的数据原样输出</p></blockquote><p><code>printWriter</code>(继承Writer)能够实现在<code>printStream</code>中的所有print方法。（但不包含用于写入原始字节的方法）</p><p>与printStream不同，如果启用的自动刷新（构造方法中启动），则只有在调用println，printf，format的其中一个方法时才可能完成此项操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PrintWriter(OutputStream out, Boolean autoFlush)</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(filename))) </span><br><span class="line"><span class="comment">//PrintWriter 提供print系方法 </span></span><br><span class="line"><span class="comment">//BufferedWriter 提供缓冲，用以加速 </span></span><br><span class="line"><span class="comment">//FileWriter 用于写文件 </span></span><br></pre></td></tr></table></figure><hr><h2 id="对象操作流："><a href="#对象操作流：" class="headerlink" title="对象操作流："></a>对象操作流：</h2><p>可以用于读写任意类型的对象</p><p><code>ObjectOutputStream</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;t.tmp&quot;</span>);</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);<span class="comment">//传入字节输出流</span></span><br><span class="line"></span><br><span class="line">oos.writeInt(<span class="number">123</span>);</span><br><span class="line">oos.writeObject(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">oos.writeObject(<span class="keyword">new</span> <span class="title class_">Student</span>());</span><br><span class="line"></span><br><span class="line">oos.close();</span><br></pre></td></tr></table></figure><p><code>ObjectInputStream</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;t.tmp&quot;</span>);</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fos);<span class="comment">//传入字节输入流</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">readInt</span><span class="params">()</span> <span class="comment">//读取一个32位int</span></span><br><span class="line">Object <span class="title function_">readObject</span><span class="params">()</span> <span class="comment">//从ObjectInputStream读取一个对象。 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不清楚读取多少次</span></span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">         <span class="type">object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">         System.out.println(obj);<span class="comment">//需要重写对象的toString方法</span></span><br><span class="line">     &#125; <span class="keyword">catch</span>(EOFException e) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;读到了文件的末尾&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优化</span></span><br><span class="line"><span class="comment">//在Output时创建集合对象，将所有的对象加入集合中，最后输出集合</span></span><br><span class="line"><span class="type">object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">System.out.println(obj);<span class="comment">//需要重写对象的toString方法</span></span><br><span class="line">ArrayList&lt;Student&gt; al = &lt;Student&gt;ois.readObject();</span><br><span class="line"></span><br><span class="line">oos.close();</span><br></pre></td></tr></table></figure><hr><p>Serializable&#96;:序列号，是一个标识接口，只起标识作用，没有方法。</p><p>当一个类的对象需要IO流进行读写的时候，这个类必须实现该接口。</p><p>当<code>Serializable</code>运行时检测到某个类具有一下问题之一时，抛出异常。</p><ul><li>该类的序列版本号与从流中读取的类描述符的版本号不匹配</li><li>该类包含位置数据类型</li><li>该类没有可访问的无参数构造方法</li></ul><p><strong>解决方法：生成特定的序列号</strong></p><hr><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a><code>Properties</code></h2><p>是Hashtable的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="comment">//添加映射关系</span></span><br><span class="line">prop.put(<span class="string">&quot;001&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">prop.put(<span class="string">&quot;002&quot;</span>, <span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">prop.put(<span class="string">&quot;003&quot;</span>, <span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历属性列表</span></span><br><span class="line"><span class="comment">//获取所有的key，通过key获取value</span></span><br><span class="line">set&lt;Object&gt; keys = prop.keySet();</span><br><span class="line"><span class="keyword">for</span>(Object key : keys) &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> prop.get(key);</span><br><span class="line">    System.out.println(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取所有的entry</span></span><br><span class="line">Set&lt;Map.Entry&lt;Object, Object&gt;&gt; entrys = prop.entrySet();</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;Object, Object&gt; entry: entrys) &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">    System.out.println(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建打印流对象list方法，只能接收打印流</span></span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="string">&quot;d.txt&quot;</span>);</span><br><span class="line"><span class="comment">//void list(PrinterWriter out);</span></span><br><span class="line">prop.list(out);</span><br><span class="line"></span><br><span class="line"><span class="comment">//store方法</span></span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;d.txt&quot;</span>);</span><br><span class="line"><span class="comment">// void store(Writer writer, String comment)</span></span><br><span class="line">prop.store(fw, <span class="string">&quot;注释&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//list只能接收打印流，store可接受所有的Writer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件load方法</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">pp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="type">BffferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Buffered</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;d.txt&quot;</span>));</span><br><span class="line">pp.load(br);</span><br><span class="line"></span><br><span class="line">br.close();</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure><hr><h2 id="编码表："><a href="#编码表：" class="headerlink" title="编码表："></a>编码表：</h2><p>把计算机底层的二进制数据转换成能看到的字符</p><blockquote><ul><li>ASCII</li><li>GB2312 — GBK    中国</li><li>Unicode  国际统一，所有字符都占2个字节</li><li>UTF-8  国际统一，长度可变的码表</li><li>ANSI： 本地编码表 GBK</li></ul></blockquote><p>Java中的字符串默认使用的是ANSI(GBK)</p><p>乱码：编码前后不一致会造成乱码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例：默认编码为GBK，文件编码为UTF-8</span></span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;头脑空空的飞雾&quot;</span>;</span><br><span class="line"><span class="comment">//字符转换为字节数组</span></span><br><span class="line"><span class="type">byte</span>[] bys = s.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">//字符流写入数据，将字节数组转换为字符</span></span><br><span class="line">fw.write(<span class="keyword">new</span> <span class="title class_">String</span>(bys));</span><br><span class="line">fw.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//转换流是FileWriter的父类，转换流构造时可以决定编码格式</span></span><br><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;b.txt&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">osw.write(s);</span><br><span class="line">osw.close();</span><br></pre></td></tr></table></figure><p>字符流 &#x3D; 字节流 + 编码</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>word</title>
      <link href="/2023/03/11/01-31-Word/"/>
      <url>/2023/03/11/01-31-Word/</url>
      
        <content type="html"><![CDATA[<h2 id="及时保存及时Ctrl-S"><a href="#及时保存及时Ctrl-S" class="headerlink" title="及时保存及时Ctrl+S"></a>及时保存及时<strong>Ctrl+S</strong></h2><h2 id="命名方式："><a href="#命名方式：" class="headerlink" title="命名方式："></a>命名方式：</h2><blockquote><p>20180315-毕业论文-0830.docx</p><p>20180315-毕业论文-1100.docx</p></blockquote><h2 id="建立标准编辑环境："><a href="#建立标准编辑环境：" class="headerlink" title="建立标准编辑环境："></a>建立标准编辑环境：</h2><ul><li>显示编辑标记（Ctrl+*）</li></ul><p><img src="C:\Users\文小幺\AppData\Roaming\Typora\typora-user-images\1675059858476.png" alt="1675059858476"></p><ul><li><p>打开标尺</p></li><li><p>打开导航窗口</p></li></ul><p><img src="C:\Users\文小幺\AppData\Roaming\Typora\typora-user-images\1675060073157.png" alt="1675060073157"></p><h2 id="鼠标，键盘操作手势"><a href="#鼠标，键盘操作手势" class="headerlink" title="鼠标，键盘操作手势"></a>鼠标，键盘操作手势</h2><ul><li><p>光标放在开始的位置，按住Shift键，再点击结尾位置，即可连续选中</p></li><li><p>通过Ctrl键可以实现跳选内容</p></li><li><p>通过Alt键可以实现矩形选择</p></li><li><p>Ctrl+Home 跳转到开头</p></li><li><p>Ctrl+End 跳转到结尾</p></li></ul><h2 id="文本段落格式"><a href="#文本段落格式" class="headerlink" title="文本段落格式"></a>文本段落格式</h2><p>每敲一次回车产生一个段落标记</p><blockquote><p>只向下的箭头是一个换行符，只换行不分段（属于同一段）</p></blockquote><blockquote><p><strong>双击格式刷可以重复利用格式刷</strong></p><p>格式刷全刷（包含字符和段落格式）会把字符和段落格式都刷</p><p>若只想刷字符，则不要选中字符后方的段落标记（刷前和刷时都是）</p><p>若只想刷段落格式，则直接点击段落不选中文字即可（刷前和刷时都是）</p></blockquote><p><strong>排版时先整体再局部</strong></p><p>Ctrl+A 全选文本，选择整体字体格式和大小</p><blockquote><p>若中文英文（Arial）想分开设置，可打开字体命令对话框</p></blockquote><p>Ctrl+E 选中居中</p><p>Ctrl+R 选中右对齐</p><p>段落缩进时不要用空格，用段落缩进</p><blockquote><ul><li>左右缩进</li><li>首行缩进（选中的第一行缩进，其余不动）</li><li>悬挂缩进（与首行缩进相反，选中的第一行不动，其余缩进）</li></ul></blockquote><p>也可以直接调整标尺</p><blockquote><p>标尺左上方时首行缩进，首行缩进下方是悬挂缩进，悬挂缩进下方是左缩进，右下方是右缩进</p><p>（用标尺调整时可以按住Alt键，实现更精准调整）</p></blockquote><p><strong>行间距设置值一致，但实际间隔不一致（解决方法：取消勾选对齐到网格）</strong></p><p>段前段后间距设置可以更好得凸显层次</p><p>底纹设置</p><p><img src="C:\Users\文小幺\AppData\Roaming\Typora\typora-user-images\1675062091407.png" alt="1675062091407"></p><p>兼容模式（低版本的word文件）部分最新功能无法使用</p><blockquote><p>可以点击文件 –&gt; 信息 –&gt; 兼容模式转换</p></blockquote><h2 id="审阅-–-gt-修订-x2F-批注-x2F-比较"><a href="#审阅-–-gt-修订-x2F-批注-x2F-比较" class="headerlink" title="审阅 –&gt; 修订&#x2F;批注&#x2F;比较"></a>审阅 –&gt; 修订&#x2F;批注&#x2F;比较</h2><blockquote><p><strong>修订</strong>可以追踪你对文件的修改（包括内容和格式）</p><p>对于修订的内容仅可进行两种操作—接受&#x2F;拒绝</p><p><strong>批注</strong>的内容可以对其进行答复以及删除</p><p><strong>比较</strong>可以更直观得显示你对文档前后修改的地方</p></blockquote><h2 id="文件保护"><a href="#文件保护" class="headerlink" title="文件保护"></a>文件保护</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>F12 –&gt; 另存为 –&gt; 工具 –&gt; 常规选项</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程基础</title>
      <link href="/2023/03/11/02-05-%E9%BB%91%E9%A9%AC%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/03/11/02-05-%E9%BB%91%E9%A9%AC%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>网络编程</p><p>Socket（套接字）</p><ul><li>用于描述IP地址和端口，是一个通信链的句柄。在Internet上的主机一般运行了多个服务软件，同时提供几种服务。每种服务都打开了一个Socket，并绑定到一个端口上，不同的端口对应于不同的服务。</li><li>Socket就是为网络编程提供的一种机制；通信的两端都有Socket；网络通信其实就是Socket间的通信；数据在两个Socket间通过IO传输。</li></ul><p>网络通信三要素：</p><ul><li><p>IP地址：InetAddress（4字节，1字节4位）（IPv6 16字节）</p><p>网络中设备的标识，不易记忆，可用主机名</p></li><li><p>端口号（进程地址）</p><p>用于标识进程的逻辑地址，不同进程的标识</p></li><li><p>传输协议</p><p>通讯的规则</p><p>常见协议：TCP,UDP</p></li></ul><blockquote><p>TCP协议：</p><p>建立连接，形成传输数据的通道；在连接中进行大数据量传输；通过三次握手完成连续，是可靠协议；必须建立连接，效率会稍低。</p><p>UDP协议：</p><p>将数据源和目的封装成数据包中，不需要建立连接，每个数据报的大小限制在64k；因无连接，是不可靠协议；不需要建立连接，速度块。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">DatagramSocket()   <span class="comment">//创建Socket对象并随机分配端口号</span></span><br><span class="line">DatagramSocket(<span class="type">int</span> port)<span class="comment">//创建Socket对象并指定端口号</span></span><br><span class="line">DatagramPacket <span class="comment">//此类表示数据包</span></span><br><span class="line">DatagramPacket(<span class="type">byte</span>[] buf, <span class="type">int</span> length, InetAddress address, <span class="type">int</span> port)</span><br><span class="line">    </span><br><span class="line"><span class="comment">//UDP协议发送数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;Hello udp&quot;</span>;</span><br><span class="line"><span class="type">byte</span>[] bys = s.getBytes();</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> bys.length;</span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;主机名&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8888</span>;</span><br><span class="line"><span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bys, length, address, port);</span><br><span class="line"><span class="comment">//创建发送端Socket对象</span></span><br><span class="line"><span class="type">DataramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">ds.send(dp);</span><br><span class="line">ds.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建接受端Socket对象</span></span><br><span class="line"><span class="type">DatagramSocket</span> <span class="variable">ds1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">8888</span>);</span><br><span class="line"><span class="comment">//接收数据</span></span><br><span class="line"><span class="comment">//DatagramPacket(byte[] buf, int length)</span></span><br><span class="line"><span class="type">byte</span>[] bys1 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">DatagramPacket</span> <span class="variable">dp1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bys1, bys1.length);</span><br><span class="line">ds1.receive(dp1);<span class="comment">//阻塞</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取发送端的IP对象</span></span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> dp1.getAddress();</span><br><span class="line"><span class="comment">//获取接收到的对象</span></span><br><span class="line"><span class="type">byte</span>[] data = dp1.getData();</span><br><span class="line"><span class="comment">//获取收到数据的长度</span></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> dp1.getLength();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Sender:&quot;</span> + address.getHostAddress());</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data，<span class="number">0</span>，length));<span class="comment">//输出接受数据的长度</span></span><br><span class="line"><span class="comment">//System.out.println(new String(bys1, 0, length));</span></span><br><span class="line"></span><br><span class="line">ds1.close();</span><br></pre></td></tr></table></figure><p>端口号只能绑定一个进程，不能重复</p><hr><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用TCP协议发送数据</span></span><br><span class="line"><span class="comment">创建发送端Socket对象（创建连接）</span></span><br><span class="line"><span class="comment">获取输出流对象</span></span><br><span class="line"><span class="comment">发送数据</span></span><br><span class="line"><span class="comment">释放资源</span></span><br><span class="line"><span class="comment">Socket(InetAddress Address, int port)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socekt</span>(InetAddress.getByName(<span class="string">&quot;主机名&quot;</span>), <span class="number">10086</span>);</span><br><span class="line"><span class="comment">//Socket创建连接</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> s.getOutputStream();</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">os.write(str.getBytes());</span><br><span class="line">os.close();</span><br><span class="line">s.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用TCP协议接收数据</span></span><br><span class="line"><span class="comment">创建发送端Socket对象</span></span><br><span class="line"><span class="comment">监听（阻塞）</span></span><br><span class="line"><span class="comment">获取输入流对象</span></span><br><span class="line"><span class="comment">获取数据</span></span><br><span class="line"><span class="comment">输出数据</span></span><br><span class="line"><span class="comment">释放资源</span></span><br><span class="line"><span class="comment">ServerSocket 接收端， 服务端套接字</span></span><br><span class="line"><span class="comment">Socket accept()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10086</span>);</span><br><span class="line"><span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> s.getInputStream();</span><br><span class="line"><span class="type">byte</span>[] bys = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> len;<span class="comment">//用于存储读到的字节个数</span></span><br><span class="line">len = is.read(bys);</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bys, <span class="number">0</span>, len));</span><br><span class="line"></span><br><span class="line">is.close();</span><br><span class="line"><span class="comment">//服务端Socket可以不关</span></span><br></pre></td></tr></table></figure><h3 id="案例1：使用TCP协议发送协议，并将接收到的数据转换成大写返回"><a href="#案例1：使用TCP协议发送协议，并将接收到的数据转换成大写返回" class="headerlink" title="案例1：使用TCP协议发送协议，并将接收到的数据转换成大写返回"></a>案例1：使用TCP协议发送协议，并将接收到的数据转换成大写返回</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">客户端发送数据</span></span><br><span class="line"><span class="comment">服务端接收数据</span></span><br><span class="line"><span class="comment">服务端处理数据</span></span><br><span class="line"><span class="comment">服务端发送数据</span></span><br><span class="line"><span class="comment">客户端接收数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socekt</span>(InetAddress.getByName(<span class="string">&quot;主机名&quot;</span>), <span class="number">10086</span>);</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> s.getOutputStraeam();</span><br><span class="line">os.write(<span class="string">&quot;hello&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> s.getInputStream();</span><br><span class="line"><span class="type">byte</span>[] bys = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> is.read(bys);</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bys, <span class="number">0</span>, len));</span><br><span class="line">os.close();</span><br><span class="line">is.close();</span><br><span class="line">s.close();</span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line">    </span><br><span class="line"><span class="type">ServerSocket</span> <span class="variable">ss1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10086</span>);</span><br><span class="line"><span class="type">Socket</span> <span class="variable">s1</span> <span class="operator">=</span> ss1.accept();</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is1</span> <span class="operator">=</span> s2.getInputStream();</span><br><span class="line"><span class="type">byte</span>[] bys1 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> len1;</span><br><span class="line">len = is1.read(bys1);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bys1, <span class="number">0</span>, len);</span><br><span class="line"><span class="type">String</span> <span class="variable">upper</span> <span class="operator">=</span> str.toUppercase();</span><br><span class="line"></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os1</span> <span class="operator">=</span> s1.getOutputStream();</span><br><span class="line">os1.write(upper.getBytes());</span><br><span class="line">os1.close();</span><br><span class="line">is1.close();</span><br><span class="line">s1.close();</span><br></pre></td></tr></table></figure><h3 id="案例2：模拟用户登录"><a href="#案例2：模拟用户登录" class="headerlink" title="案例2：模拟用户登录"></a>案例2：模拟用户登录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;主机名&quot;</span>, <span class="number">10086</span>);</span><br><span class="line"><span class="comment">//Sockete s = new Socket(InetAddress.getByName(&quot;主机名&quot;), 10086);</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> s.getOutputStream();</span><br><span class="line"></span><br><span class="line">String userName, passWord;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStremReader</span>(System.in));</span><br><span class="line">System.out.println(<span class="string">&quot;请输入用户名&quot;</span>);</span><br><span class="line">userName = br.readLine();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">passWord = br.readLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取输出流对象</span></span><br><span class="line"><span class="comment">//BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(s.getOutputStream));</span></span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(s.getOutputStream(), <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//写出数据</span></span><br><span class="line">out.println(userName);</span><br><span class="line">out.println(passWord);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取输入流对象</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(s.getInputStream));</span><br><span class="line"><span class="comment">//获取服务器返回的内容</span></span><br><span class="line"><span class="type">String</span> <span class="variable">reseult</span> <span class="operator">=</span> server.readLine();</span><br><span class="line">System.out.println(result);</span><br><span class="line"></span><br><span class="line">s.close();</span><br><span class="line"></span><br><span class="line">--------------------------------------</span><br><span class="line"><span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10086</span>);</span><br><span class="line"><span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(s.getInputStreamReader));</span><br><span class="line"><span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> br1.readLine();</span><br><span class="line"><span class="type">String</span> <span class="variable">passWord</span> <span class="operator">=</span> br1.readLine();</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(userName.equals(<span class="string">&quot;zhanghao&quot;</span>) &amp;&amp; passWord.equals(<span class="string">&quot;mimamima&quot;</span>)) &#123;</span><br><span class="line">    flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">out1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(s.getOutputStream(), <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line">    out1.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    out1.println(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s.close();</span><br><span class="line"><span class="comment">//ss.close();   一般服务器不关闭</span></span><br></pre></td></tr></table></figure><p>优化登录案例</p><blockquote><p>将账号密码定义为一个类 user(String userName, String passWord)</p><p>通过Arraylist对user类进行储存</p><p>定义一个方法返回存储user的list</p><p>服务端获取该list，通过contains()方法判断list中是否包含该user类</p><ul><li>contains()方法实际是通过indexOf() 方法 –&gt; indexOf() 方法实际又是通过for循环equals()方法</li><li>故应该重写user类的equals方法</li></ul></blockquote><h2 id="equals方法与hashCode方法"><a href="#equals方法与hashCode方法" class="headerlink" title="equals方法与hashCode方法"></a>equals方法与hashCode方法</h2><p><code>boolean equals(Object obj)</code></p><p>使用 ‘&#x3D;&#x3D;’ 来比较两个对象是否相等，</p><blockquote><p>基本类型使用 ‘&#x3D;&#x3D;’ 实际是比较值是否相等</p><p>引用类型使用 ’&#x3D;&#x3D;‘ 实际是比较地址值是否相等</p><ul><li>故引用类型（自定义）用equals 无法得到想要的结果，应该重写equals方法</li></ul></blockquote><p>HashSet的不重复添加</p><blockquote><p>HashSet的add()方法，首先会使用当前集合中的每一个源氏和新添加的元素进行hash值比较，</p><p>如果hash值不一样，则直接添加新的元素</p><p>如果hash值一样，比较地址值或者使用equals方法进行比较</p><p>比较结果一样，则认为是重复不添加</p><p>所有的比较结果都不一样则添加</p></blockquote><p>故应重写HashCode方法使不同对象的Hash值</p><p>思路</p><blockquote><p>当HashCode方法永远返回整数1时，所有对象的Hash值都是一样的</p><p>如果我们可以让成员变量不同的对象，他们的Hash值也不同，这样可以减少一部分equals方法的比较，从而提高效率</p><p>可以尝试让HashCode方法的返回值和对象的成员变量有关</p><p>可以让HashCode方法的返回所有成员变量之和，</p><p>让基本数据类型直接相加，引用类型获取HashCode返回值后再相加（boolean不可以参与运算）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> user user)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(userName, user.userName) &amp;&amp; Objects.equals(passWord, user.passWord);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(userName, passWord);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(Object a[])</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Object element : a)</span><br><span class="line">            result = <span class="number">31</span> * result + (element == <span class="literal">null</span> ? <span class="number">0</span> : element.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2023/03/11/02-12-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2023/03/11/02-12-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p><strong>所有数据结构都是基于数组、或链表、或两者组合实现的</strong>。例如栈和队列，既可以使用数组实现、也可以使用链表实现，而例如哈希表，其实现同时包含了数组和链表。</p><ul><li><strong>基于数组可实现</strong>：栈、队列、哈希表、树、堆、图、矩阵、张量（维度 ≥3 的数组）等；</li><li><strong>基于链表可实现</strong>：栈、队列、哈希表、树、堆、图等；</li></ul><p>基于数组实现的数据结构也被称为「静态数据结构」，这意味着该数据结构在在被初始化后，长度不可变。相反地，基于链表实现的数据结构被称为「动态数据结构」，该数据结构在被初始化后，我们也可以在程序运行中修改其长度。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>主要可根据「逻辑结构」和「物理结构」两种角度进行分类。</p><blockquote><ul><li>逻辑结构：线性与非线性</li><li>物理结构：连续与离散</li></ul></blockquote><h3 id="为什么数组元素索引从-0-开始编号？"><a href="#为什么数组元素索引从-0-开始编号？" class="headerlink" title="为什么数组元素索引从 0 开始编号？"></a><strong>为什么数组元素索引从 0 开始编号？</strong></h3><p>根据地址计算公式，<strong>索引本质上表示的是内存地址偏移量</strong>，首个元素的地址偏移量是 0 ，那么索引是 0 也就很自然了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 随机返回一个数组元素 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">randomAccess</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">// 在区间 [0, nums.length) 中随机抽取一个数字</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">randomIndex</span> <span class="operator">=</span> ThreadLocalRandom.current().</span><br><span class="line">                      nextInt(<span class="number">0</span>, nums.length);</span><br><span class="line">    <span class="comment">// 获取并返回随机元素</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">randomNum</span> <span class="operator">=</span> nums[randomIndex];</span><br><span class="line">    <span class="keyword">return</span> randomNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 随机访问元素 &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_access</span>(<span class="params">nums</span>):</span><br><span class="line">    <span class="comment"># 在区间 [0, len(nums)-1] 中随机抽取一个数字</span></span><br><span class="line">    random_index = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 获取并返回随机元素</span></span><br><span class="line">    random_num = nums[random_index]</span><br><span class="line">    <span class="keyword">return</span> random_num</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>「链表 Linked List」是一种线性数据结构，其中每个元素都是单独的对象，各个元素（一般称为结点）之间通过指针连接。由于结点中记录了连接关系，因此链表的存储方式相比于数组更加灵活，系统不必保证内存地址的连续性。</p><p>链表的「结点 Node」包含两项数据，一是结点「值 Value」，二是指向下一结点的「指针 Pointer」（或称「引用 Reference」）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 链表结点类 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;        <span class="comment">// 结点值</span></span><br><span class="line">    ListNode next;  <span class="comment">// 指向下一结点的指针（引用）</span></span><br><span class="line">    ListNode(<span class="type">int</span> x) &#123; val = x; &#125;  <span class="comment">// 构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化链表 1 -&gt; 3 -&gt; 2 -&gt; 5 -&gt; 4 */</span></span><br><span class="line"><span class="comment">// 初始化各个结点 </span></span><br><span class="line"><span class="type">ListNode</span> <span class="variable">n0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">3</span>);</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">2</span>);</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">5</span>);</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">n4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// 构建引用指向</span></span><br><span class="line">n0.next = n1;</span><br><span class="line">n1.next = n2;</span><br><span class="line">n2.next = n3;</span><br><span class="line">n3.next = n4;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在链表的结点 n0 之后插入结点 P */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(ListNode n0, ListNode P)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">n1</span> <span class="operator">=</span> n0.next;</span><br><span class="line">    n0.next = P;</span><br><span class="line">    P.next = n1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除链表的结点 n0 之后的首个结点 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(ListNode n0)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n0.next == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// n0 -&gt; P -&gt; n1</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">P</span> <span class="operator">=</span> n0.next;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">n1</span> <span class="operator">=</span> P.next;</span><br><span class="line">    n0.next = n1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="链表缺点¶"><a href="#链表缺点¶" class="headerlink" title="链表缺点¶"></a>链表缺点<a href="https://www.hello-algo.com/chapter_array_and_linkedlist/linked_list/#422">¶</a></h3><p><strong>链表访问结点效率低</strong>。上节提到，数组可以在 O(1) 时间下访问任意元素，但链表无法直接访问任意结点。这是因为计算机需要从头结点出发，一个一个地向后遍历到目标结点。例如，倘若想要访问链表索引为 <code>index</code> （即第 <code>index + 1</code> 个）的结点，那么需要 <code>index</code> 次访问操作。</p><p>JavaC++PythonGoJavaScriptTypeScriptCC#SwiftZig</p><p>linked_list.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 访问链表中索引为 index 的结点 */</span></span><br><span class="line">ListNode <span class="title function_">access</span><span class="params">(ListNode head, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>链表的内存占用多</strong>。链表以结点为单位，每个结点除了保存值外，还需额外保存指针（引用）。这意味着同样数据量下，链表比数组需要占用更多内存空间。</p><h3 id="链表优点¶"><a href="#链表优点¶" class="headerlink" title="链表优点¶"></a>链表优点<a href="https://www.hello-algo.com/chapter_array_and_linkedlist/linked_list/#421">¶</a></h3><p><strong>在链表中，插入与删除结点的操作效率高</strong>。例如，如果想在链表中间的两个结点 <code>A</code> , <code>B</code> 之间插入一个新结点 <code>P</code> ，我们只需要改变两个结点指针即可，时间复杂度为 O(1) ，相比数组的插入操作高效很多。在链表中删除某个结点也很方便，只需要改变一个结点指针即可。</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><blockquote><p><strong>由于长度不可变，数组的实用性大大降低</strong>。在很多情况下，我们事先并不知道会输入多少数据，这就为数组长度的选择带来了很大困难。长度选小了，需要在添加数据中频繁地扩容数组；长度选大了，又造成内存空间的浪费。</p><p>为了解决此问题，诞生了一种被称为「列表 List」的数据结构。列表可以被理解为长度可变的数组，因此也常被称为「动态数组 Dynamic Array」。列表基于数组实现，继承了数组的优点，同时还可以在程序运行中实时扩容。在列表中，我们可以自由地添加元素，而不用担心超过容量限制。</p></blockquote><p><strong>在列表中添加、插入、删除元素</strong>。相对于数组，列表可以自由地添加与删除元素。在列表尾部添加元素的时间复杂度为 O(1) ，但是插入与删除元素的效率仍与数组一样低，时间复杂度为 O(N) 。</p><p><strong>拼接两个列表</strong>。再创建一个新列表 <code>list1</code> ，我们可以将其中一个列表拼接到另一个的尾部。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 拼接两个列表 */</span></span><br><span class="line">List&lt;Integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="keyword">new</span> <span class="title class_">Integer</span>[] &#123; <span class="number">6</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">9</span> &#125;));</span><br><span class="line">list.addAll(list1);  <span class="comment">// 将列表 list1 拼接到 list 之后</span></span><br></pre></td></tr></table></figure><p><strong>排序列表</strong>。排序也是常用的方法之一，完成列表排序后，我们就可以使用在数组类算法题中经常考察的「二分查找」和「双指针」算法了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 排序列表 */</span></span><br><span class="line">Collections.sort(list);  <span class="comment">// 排序后，列表元素从小到大排列</span></span><br></pre></td></tr></table></figure><h2 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h2><h3 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h3><p>广度优先算法（Breadth First Traversal）bft</p><p><img src="https://www.hello-algo.com/chapter_tree/binary_tree_traversal.assets/binary_tree_bfs.png" alt="二叉树的层序遍历"></p><h3 id="前中后序遍历"><a href="#前中后序遍历" class="headerlink" title="前中后序遍历"></a>前中后序遍历</h3><p>深度优先算法（Depth First Traversal）dft</p><p><img src="https://www.hello-algo.com/chapter_tree/binary_tree_traversal.assets/binary_tree_dfs.png" alt="二叉搜索树的前、中、后序遍历"></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2023/03/11/02-09-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2023/03/11/02-09-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>?</strong> 通配符匹配文件名中的 0 个或 1 个字符，而 ***** 通配符匹配零个或多个字符。</p><p>data(\w)?\.dat   将查找下列文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data.dat</span><br><span class="line">data1.dat</span><br><span class="line">data2.dat</span><br><span class="line">datax.dat</span><br><span class="line">dataN.dat</span><br></pre></td></tr></table></figure><p>data.*\.dat   匹配下列所有文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data.dat</span><br><span class="line">data1.dat</span><br><span class="line">data2.dat</span><br><span class="line">data12.dat</span><br><span class="line">datax.dat</span><br><span class="line">dataXYZ.dat</span><br></pre></td></tr></table></figure><p>模式（pattern）</p><ul><li><strong>runoo+b</strong>，可以匹配 <strong>runoob、runooob、runoooooob</strong> 等，**+** 号代表前面的字符必须至少出现一次（1次或多次）。</li><li><strong>runoo*b</strong>，可以匹配 <strong>runob、runoob、runoooooob</strong> 等，***** 号代表前面的字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。</li><li><strong>colou?r</strong> 可以匹配 <strong>color</strong> 或者 <strong>colour</strong>，**?** 问号代表前面的字符最多只可以出现一次（0次或1次）。</li></ul><h2 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h2><table><thead><tr><th>字符</th><th align="left">描述</th></tr></thead><tbody><tr><td><strong>[ABC]</strong></td><td align="left">匹配 <strong>[…]</strong> 中的所有字符，例如 <strong>[aeiou]</strong> 匹配字符串 “google runoob taobao” 中所有的 e o u a 字母。</td></tr><tr><td><strong>[^ABC]</strong></td><td align="left">匹配除了 <strong>[…]</strong> 中字符的所有字符，例如 <strong>[^aeiou]</strong> 匹配字符串 “google runoob taobao” 中除了 e o u a 字母的所有字母。</td></tr><tr><td><strong>[A-Z]</strong></td><td align="left">[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。</td></tr><tr><td><strong>.</strong></td><td align="left">匹配除换行符（\n、\r）之外的任何单个字符，相当于[^\n\r] 。</td></tr><tr><td><strong>[\s\S]</strong></td><td align="left">匹配所有。\s 是匹配所有空白符，包括换行，\S 非空白符，不包括换行。</td></tr><tr><td><strong>\w</strong></td><td align="left">匹配字母、数字、下划线。等价于 [A-Za-z0-9_]</td></tr></tbody></table><h2 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h2><p>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\cx</td><td align="left">匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td align="left">\f</td><td align="left">匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td align="left">\n</td><td align="left">匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td align="left">\r</td><td align="left">匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td align="left">\s</td><td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。</td></tr><tr><td align="left">\S</td><td align="left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td align="left">\t</td><td align="left">匹配一个制表符(Tab)。等价于 \x09 和 \cI。</td></tr><tr><td align="left">\v</td><td align="left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr></tbody></table><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>所谓特殊字符，就是一些有特殊含义的字符，如上面说的 <strong>runoo*b</strong> 中的 *****，简单的说就是表示任何字符串的意思。如果要查找字符串中的 ***** 符号，则需要对 ***** 进行转义，即在其前加一个 <em>***，**runo*ob</em>* 匹配字符串 <strong>runo*ob</strong>。</p><p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符*<em>*</em> 放在它们前面。下表列出了正则表达式中的特殊字符：</p><table><thead><tr><th align="left">特别字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">$</td><td align="left">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 \$。</td></tr><tr><td align="left">( )</td><td align="left">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和\ )。</td></tr><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。要匹配 * 字符，请使用\ *。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式至少一次或多次。要匹配 + 字符，请使用 \+。</td></tr><tr><td align="left">.</td><td align="left">匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 \. 。</td></tr><tr><td align="left">[</td><td align="left">标记一个中括号表达式的开始。要匹配 [，请使用 \[。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td></tr><tr><td align="left">\</td><td align="left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\\‘ 匹配 “\“，而 ‘\(‘ 则匹配 “(“。</td></tr><tr><td align="left">^</td><td align="left">匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td></tr><tr><td align="left">{</td><td align="left">标记限定符表达式的开始。要匹配 {，请使用 \{。</td></tr><tr><td align="left">|</td><td align="left">指明两项之间的一个选择。要匹配 |，请使用 \</td></tr></tbody></table><h2 id="非贪婪匹配（regex默认为贪婪）"><a href="#非贪婪匹配（regex默认为贪婪）" class="headerlink" title="非贪婪匹配（regex默认为贪婪）"></a>非贪婪匹配（regex默认为贪婪）</h2><h3 id="Lazy-Matching"><a href="#Lazy-Matching" class="headerlink" title="Lazy Matching"></a>Lazy Matching</h3><blockquote><p>Lazy matchmaking, unlike greedy matching, stops at the first matching. </p><p>For example, in the example below, add a ? after * to find the first match that ends with the letter r and is preceded by any character. </p><p>It means that this match will stop at the first letter r.</p></blockquote><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 ***** 或 <strong>+</strong> 或 <strong>?</strong> 或 <strong>{n}</strong> 或 <strong>{n,}</strong> 或 <strong>{n,m}</strong> 共6种。</p><p>正则表达式的限定符有：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。例如，<strong>zo*</strong> 能匹配 <strong>“z”</strong> 以及 <strong>“zoo”<strong>。</strong></strong>* 等价于 **{0,}**。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。例如，<strong>zo+</strong> 能匹配 <strong>“zo”</strong> 以及 “**zoo”**，但不能匹配 <strong>“z”<strong>。</strong>+</strong> 等价于 **{1,}**。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次。例如，<strong>do(es)?</strong> 可以匹配 <strong>“do”</strong> 、 <strong>“does”<strong>、 <strong>“doxy”</strong> 中的 <strong>“do”</strong> 。</strong>?</strong> 等价于 **{0,1}**。<img src="https://www.runoob.com/wp-content/uploads/2014/03/CA742DA3-826D-463B-85F5-316DAB3515C1.jpeg" alt="img"></td></tr><tr><td align="left">{n}</td><td align="left">n 是一个非负整数。匹配确定的 <strong>n</strong> 次。例如，<strong>o{2}</strong> 不能匹配 <strong>“Bob”</strong> 中的 <strong>o</strong>，但是能匹配 <strong>“food”</strong> 中的两个 <strong>o</strong>。</td></tr><tr><td align="left">{n,}</td><td align="left">n 是一个非负整数。至少匹配n 次。例如，<strong>o{2,}</strong> 不能匹配 <strong>“Bob”</strong> 中的 <strong>o</strong>，但能匹配 <strong>“foooood”</strong> 中的所有 <strong>o</strong>。<strong>o{1,}</strong> 等价于 <strong>o+<strong>。</strong>o{0,}</strong> 则等价于 **o***。</td></tr><tr><td align="left">{n,m}</td><td align="left">m 和 n 均为非负整数，其中 n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。例如，<strong>o{1,3}</strong> 将匹配 <strong>“fooooood”</strong> 中的前三个 <strong>o</strong>。<strong>o{0,1}</strong> 等价于 **o?**。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table><p>以下正则表达式匹配一个正整数，**[1-9]<strong>设置第一个数字不是 0，</strong>[0-9]*** 表示任意多个数字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[1-9][0-9]*/</span><br></pre></td></tr></table></figure><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/F249891D-F3D9-48D5-A3CB-6FD8FD029117.jpg" alt="img"></p><p>请注意，限定符出现在范围表达式之后。因此，它应用于整个范围表达式，在本例中，只指定从 0 到 9 的数字（包括 0 和 9）。</p><p>这里不使用 + 限定符，因为在第二个位置或后面的位置不一定需要有一个数字（可为个位数）。也不使用 ? 字符，因为使用 ? 会将整数限制到只有两位数。</p><p>如果你想设置 0~99 的两位数，可以使用下面的表达式来至少指定一位但至多两位数字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[0-9]&#123;1,2&#125;/</span><br></pre></td></tr></table></figure><p>上面的表达式的缺点是，只能匹配两位数字，而且可以匹配 0、00、01、10 99 的章节编号仍只匹配开头两位数字。</p><p>改进下，匹配 1~99 的正整数表达式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[1-9][0-9]?/</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[1-9][0-9]&#123;0,1&#125;/</span><br></pre></td></tr></table></figure><p><strong>和 + 限定符都是<u>贪婪</u>的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个 ? 就可以实现<u>非贪婪或最小匹配</u>。</strong></p><p>例如，您可能搜索 HTML 文档，以查找在 <strong>h1</strong> 标签内的内容。HTML 代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;RUNOOB-菜鸟教程&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p><strong>贪婪：</strong>下面的表达式匹配从开始小于符号 (&lt;) 到关闭 h1 标记的大于符号 (&gt;) 之间的所有内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/&lt;.*&gt;/</span><br></pre></td></tr></table></figure><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/AD8F3320-2F2E-4513-9BB5-84450D62783D.jpg" alt="img"></p><p><strong>非贪婪：</strong>如果您只需要匹配开始和结束 h1 标签，下面的非贪婪表达式只匹配 <h1>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/&lt;.*?&gt;/</span><br></pre></td></tr></table></figure><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/A6E72665-CE61-46F4-A72B-A34BC13F5820.jpg" alt="img"></p><p>也可以使用以下正则表达式来匹配 h1 标签，表达式则是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/&lt;\w+?&gt;/</span><br></pre></td></tr></table></figure><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/C6E89F76-D059-4600-A507-74C42306A790.jpg" alt="img"></p><p>通过在 *<strong><strong>、</strong>+</strong> 或 <strong>?</strong> 限定符之后放置 **?**，<u>该表达式从”贪婪”表达式转换为”非贪婪”表达式或者最小匹配</u>。</p><h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p><p>定位符用来描述字符串或单词的边界，<strong>^</strong> 和 <strong>$</strong> 分别指字符串的开始与结束，<strong>\b</strong> 描述单词的前或后边界，<strong>\B</strong> 表示非单词边界。</p><p>正则表达式的定位符有：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">^</td><td align="left">匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td></tr><tr><td align="left">\b</td><td align="left">匹配一个单词边界，即字与空格间的位置。</td></tr><tr><td align="left">\B</td><td align="left">非单词边界匹配。</td></tr></tbody></table><p><strong>注意</strong>：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 <strong>^*</strong> 之类的表达式。</p><p>若要匹配一行文本开始处的文本，请在正则表达式的开始使用 <strong>^</strong> 字符。不要将 <strong>^</strong> 的这种用法与中括号表达式内的用法混淆。</p><p>若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用 <strong>$</strong> 字符。</p><p>若要在搜索章节标题时使用定位点，下面的正则表达式匹配一个章节标题，该标题只包含两个尾随数字，并且出现在行首：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^Chapter [1-9][0-9]&#123;0,1&#125;/</span><br></pre></td></tr></table></figure><p>真正的章节标题不仅出现行的开始处，而且它还是该行中仅有的文本。它既出现在行首又出现在同一行的结尾。下面的表达式能确保指定的匹配只匹配章节而不匹配交叉引用。通过创建只匹配一行文本的开始和结尾的正则表达式，就可做到这一点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^Chapter [1-9][0-9]&#123;0,1&#125;$/</span><br></pre></td></tr></table></figure><p>匹配单词边界稍有不同，但向正则表达式添加了很重要的能力。单词边界是单词和空格之间的位置。非单词边界是任何其他位置。下面的表达式匹配单词 Chapter 的开头三个字符，因为这三个字符出现在单词边界后面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/\bCha/</span><br></pre></td></tr></table></figure><p><strong>\b</strong> 字符的位置是非常重要的。如果它位于要匹配的字符串的开始，它在单词的开始处查找匹配项。如果它位于字符串的结尾，它在单词的结尾处查找匹配项。例如，下面的表达式匹配单词 Chapter 中的字符串 ter，因为它出现在单词边界的前面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ter\b/</span><br></pre></td></tr></table></figure><p>下面的表达式匹配 Chapter 中的字符串 apt，但不匹配 aptitude 中的字符串 apt：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/\Bapt/</span><br></pre></td></tr></table></figure><p>字符串 apt 出现在单词 Chapter 中的非单词边界处，但出现在单词 aptitude 中的单词边界处。对于 <strong>\B</strong> 非单词边界运算符，不可以匹配单词的开头或结尾，如果是下面的表达式，就不匹配 Chapter 中的 Cha：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\BCha</span><br></pre></td></tr></table></figure><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>用圆括号 <strong>()</strong> 将所有选择项括起来，相邻的选择项之间用 <strong>|</strong> 分隔。</p><p><strong>()</strong> 表示捕获分组，**()** 会把每个分组里的匹配的值保存起来， 多个匹配值可以通过数字 n 来查看(<strong>n</strong> 是一个数字，表示第 n 个捕获组的内容)。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/366574CC-3706-4B4C-8782-1BFF4CF57582.jpg" alt="img"></p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/82A7298A-2A94-49E3-AA27-A7778EE89711.jpg" alt="img"></p><p>但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用 <strong>?:</strong> 放在第一个选项前来消除这种副作用。</p><p>其中 <strong>?:</strong> 是非捕获元之一，还有两个非捕获元是 <strong>?&#x3D;</strong> 和 **?!**，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</p><p><strong>以下列出 ?&#x3D;、?&lt;&#x3D;、?!、?&lt;! 的使用区别</strong></p><p>**exp1(?&#x3D;exp2)**：查找 exp2 前面的 exp1。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/reg-111.jpg" alt="img"></p><p><strong>(?&lt;&#x3D;exp2)exp1</strong>：查找 exp2 后面的 exp1。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/reg-222.jpg" alt="img"></p><p>**exp1(?!exp2)**：查找后面不是 exp2 的 exp1。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/reg-333.jpg" alt="img"></p><p><strong>(?&lt;!exp2)exp1</strong>：查找前面不是 exp2 的 exp1。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/reg-444.jpg" alt="img"></p><blockquote><p>更多内容可以参考：<a href="https://www.runoob.com/w3cnote/reg-lookahead-lookbehind.html">正则表达式的先行断言(lookahead)和后行断言(lookbehind)</a></p></blockquote><h2 id="正则表达式-修饰符（标记）"><a href="#正则表达式-修饰符（标记）" class="headerlink" title="正则表达式 - 修饰符（标记）"></a>正则表达式 - 修饰符（标记）</h2><p><strong>标记也称为修饰符，正则表达式的标记用于指定额外的匹配策略</strong>。</p><p>标记不写在正则表达式里，标记位于表达式之外，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/pattern/flags</span><br></pre></td></tr></table></figure><p>下表列出了正则表达式常用的修饰符：</p><table><thead><tr><th align="left">修饰符</th><th align="left">含义</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">i</td><td align="left">ignore - 不区分大小写</td><td align="left">将匹配设置为不区分大小写，搜索时不区分大小写: A 和 a 没有区别。</td></tr><tr><td align="left">g</td><td align="left">global - 全局匹配</td><td align="left">查找所有的匹配项。</td></tr><tr><td align="left">m</td><td align="left">multi line - 多行匹配</td><td align="left">使边界字符 <strong>^</strong> 和 <strong>$</strong> 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</td></tr><tr><td align="left">s</td><td align="left">特殊字符圆点 <strong>.</strong> 中包含换行符 <strong>\n</strong></td><td align="left">默认情况下的圆点 <strong>.</strong> 是匹配除换行符 <strong>\n</strong> 之外的任何字符，加上 <strong>s</strong> 修饰符之后, <strong>.</strong> 中包含换行符 \n。</td></tr></tbody></table><h2 id="正则表达式-元字符"><a href="#正则表达式-元字符" class="headerlink" title="正则表达式 - 元字符"></a>正则表达式 - 元字符</h2><p>下表包含了元字符的完整列表以及它们在正则表达式上下文中的行为：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\</td><td align="left">将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\‘ 匹配 “&quot; 而 “(“ 则匹配 “(“。</td></tr><tr><td align="left">^</td><td align="left">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</td></tr><tr><td align="left">{n}</td><td align="left">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td align="left">{n,}</td><td align="left">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td align="left">{n,m}</td><td align="left">m 和 n 均为非负整数，其中n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td align="left">?</td><td align="left">当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td></tr><tr><td align="left">.</td><td align="left">匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像”<strong>(.|\n)</strong>“的模式。</td></tr><tr><td align="left">(pattern)</td><td align="left">匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td></tr><tr><td align="left">(?:pattern)</td><td align="left">匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。</td></tr><tr><td align="left">(?&#x3D;pattern)</td><td align="left">正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，”Windows(?&#x3D;95|98|NT|2000)”能匹配”Windows2000”中的”Windows”，但不能匹配”Windows3.1”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td align="left">(?!pattern)</td><td align="left">正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如”Windows(?!95|98|NT|2000)”能匹配”Windows3.1”中的”Windows”，但不能匹配”Windows2000”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td align="left">(?&lt;&#x3D;pattern)</td><td align="left">反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，”&#96;(?&lt;&#x3D;95</td></tr><tr><td align="left">(?&lt;!pattern)</td><td align="left">反向否定预查，与正向否定预查类似，只是方向相反。例如”&#96;(?&lt;!95</td></tr><tr><td align="left">x|y</td><td align="left">匹配 x 或 y。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td align="left">[xyz]</td><td align="left">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td align="left">[^xyz]</td><td align="left">负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td></tr><tr><td align="left">[a-z]</td><td align="left">字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td></tr><tr><td align="left">[^a-z]</td><td align="left">负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr><tr><td align="left">\b</td><td align="left">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr><tr><td align="left">\B</td><td align="left">匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td></tr><tr><td align="left">\cx</td><td align="left">匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td align="left">\d</td><td align="left">匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td align="left">\D</td><td align="left">匹配一个非数字字符。等价于 [ ^0-9]。</td></tr><tr><td align="left">\f</td><td align="left">匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td align="left">\n</td><td align="left">匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td align="left">\r</td><td align="left">匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td align="left">\s</td><td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td align="left">\S</td><td align="left">匹配任何非空白字符。等价于 [ ^ \f\n\r\t\v]。</td></tr><tr><td align="left">\t</td><td align="left">匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td align="left">\v</td><td align="left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td align="left">\w</td><td align="left">匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’。</td></tr><tr><td align="left">\W</td><td align="left">匹配非字母、数字、下划线。等价于   ‘[ ^A-Za-z0-9_]’。</td></tr><tr><td align="left">\xn</td><td align="left">匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td></tr><tr><td align="left">\num</td><td align="left">匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td></tr><tr><td align="left">\n</td><td align="left">标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td align="left">\nm</td><td align="left">标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td></tr><tr><td align="left">\nml</td><td align="left">如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td align="left">\un</td><td align="left">匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;abcd test@runoob.com 1234&quot;; </span><br><span class="line">var patt1 = /\b[\w.%+-]+@[\w.-]+\.[a-zA-Z]&#123;2,6&#125;\b/g; </span><br><span class="line">document.write(str.match(patt1));</span><br></pre></td></tr></table></figure><p>以下标记的文本是获得的匹配的表达式：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/3D635D20-FE65-420F-9E79-5B4F1E7E7374.jpg" alt="img"></p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/regexp-metachar-2020-11-23.png" alt="img"></p><h2 id="正则表达式-运算符优先级"><a href="#正则表达式-运算符优先级" class="headerlink" title="正则表达式 - 运算符优先级"></a>正则表达式 - 运算符优先级</h2><p>正则表达式从左到右进行计算，并遵循优先级顺序，这与算术表达式非常类似。</p><p>相同优先级的从左到右进行运算，不同优先级的运算先高后低。下表从最高到最低说明了各种正则表达式运算符的优先级顺序：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\</td><td align="left">转义符</td></tr><tr><td align="left">(), (?:), (?&#x3D;), []</td><td align="left">圆括号和方括号</td></tr><tr><td align="left">*, +, ?, {n}, {n,}, {n,m}</td><td align="left">限定符</td></tr><tr><td align="left">^, $, \任何元字符、任何字符</td><td align="left">定位点和序列（即：位置和顺序）</td></tr><tr><td align="left">|</td><td align="left">替换，”或”操作 字符具有高于替换运算符的优先级，使得”m|food”匹配”m”或”food”。若要匹配”mood”或”food”，请使用括号创建子表达式，从而产生”(m|f)ood”。</td></tr></tbody></table><h2 id="正则表达式-匹配规则"><a href="#正则表达式-匹配规则" class="headerlink" title="正则表达式 - 匹配规则"></a>正则表达式 - 匹配规则</h2><h3 id="基本模式匹配"><a href="#基本模式匹配" class="headerlink" title="基本模式匹配"></a>基本模式匹配</h3><p>一切从最基本的开始。模式，是正则表达式最基本的元素，它们是一组描述字符串特征的字符。模式可以很简单，由普通的字符串组成，也可以非常复杂，往往用特殊的字符表示一个范围内的字符、重复出现，或表示上下文。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^once</span><br></pre></td></tr></table></figure><p>这个模式包含一个特殊的字符 <strong>^</strong>，表示该模式只匹配那些以 <strong>once</strong> 开头的字符串。例如该模式与字符串 <strong>“once upon a time”</strong> 匹配，与 <strong>“There once was a man from NewYork”</strong> 不匹配。正如如 <strong>^</strong> 符号表示开头一样，**$** 符号用来匹配那些以给定模式结尾的字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bucket$</span><br></pre></td></tr></table></figure><p>这个模式与 <strong>“Who kept all of this cash in a bucket”</strong> 匹配，与 <strong>“buckets”</strong> 不匹配。字符 <strong>^</strong> 和 <strong>$</strong> 同时使用时，表示精确匹配（字符串与模式一样）。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^bucket$</span><br></pre></td></tr></table></figure><p>只匹配字符串 **”bucket”**。如果一个模式不包括 <strong>^</strong> 和 **$**，那么它与任何包含该模式的字符串匹配。例如模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">once</span><br></pre></td></tr></table></figure><p>与字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">There once was a man from NewYork</span><br><span class="line">Who kept all of his cash in a bucket.</span><br></pre></td></tr></table></figure><p>是匹配的。</p><p>在该模式中的字母 <strong>(o-n-c-e)</strong> 是字面的字符，也就是说，他们表示该字母本身，数字也是一样的。其他一些稍微复杂的字符，如标点符号和白字符（空格、制表符等），要用到转义序列。所有的转义序列都用反斜杠 *<em>*</em> 打头。制表符的转义序列是 <strong>\t</strong>。所以如果我们要检测一个字符串是否以制表符开头，可以用这个模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\t </span><br></pre></td></tr></table></figure><p>类似的，用 <strong>\n</strong> 表示**”新行”<strong>，</strong>\r** 表示回车。其他的特殊符号，可以用在前面加上反斜杠，如反斜杠本身用 <strong>\</strong> 表示，句号 <strong>.</strong> 用 <strong>.</strong> 表示，以此类推。</p><h3 id="字符簇"><a href="#字符簇" class="headerlink" title="字符簇"></a>字符簇</h3><p>在 INTERNET 的程序中，正则表达式通常用来验证用户的输入。当用户提交一个 FORM 以后，要判断输入的电话号码、地址、EMAIL 地址、信用卡号码等是否有效，用普通的基于字面的字符是不够的。</p><p>所以要用一种更自由的描述我们要的模式的办法，它就是字符簇。要建立一个表示所有元音字符的字符簇，就把所有的元音字符放在一个方括号里：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[AaEeIiOoUu]</span><br></pre></td></tr></table></figure><p>这个模式与任何元音字符匹配，但只能表示一个字符。用连字号可以表示一个字符的范围，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[a-z] // 匹配所有的小写字母 </span><br><span class="line">[A-Z] // 匹配所有的大写字母 </span><br><span class="line">[a-zA-Z] // 匹配所有的字母 </span><br><span class="line">[0-9] // 匹配所有的数字 </span><br><span class="line">[0-9\.\-] // 匹配所有的数字，句号和减号 </span><br><span class="line">[ \f\r\t\n] // 匹配所有的白字符</span><br></pre></td></tr></table></figure><p>同样的，这些也只表示一个字符，这是一个非常重要的。如果要匹配一个由一个小写字母和一位数字组成的字符串，比如 “z2”、”t6” 或 “g7”，但不是 “ab2”、”r2d3” 或 “b52” 的话，用这个模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[a-z][0-9]$</span><br></pre></td></tr></table></figure><p>尽管 <strong>[a-z]</strong> 代表 26 个字母的范围，但在这里它只能与第一个字符是小写字母的字符串匹配。</p><p>前面曾经提到^表示字符串的开头，但它还有另外一个含义。当在一组方括号里使用 <strong>^</strong> 时，它表示”<strong>非</strong>“或”<strong>排除</strong>“的意思，常常用来剔除某个字符。还用前面的例子，我们要求第一个字符不能是数字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[^0-9][0-9]$</span><br></pre></td></tr></table></figure><p>这个模式与 “&amp;5”、”g7”及”-2” 是匹配的，但与 “12”、”66” 是不匹配的。下面是几个排除特定字符的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[^a-z] //除了小写字母以外的所有字符 </span><br><span class="line">[^\\\/\^] //除了(\)(/)(^)之外的所有字符 </span><br><span class="line">[^\&quot;\&#x27;] //除了双引号(&quot;)和单引号(&#x27;)之外的所有字符</span><br></pre></td></tr></table></figure><p>特殊字符 <strong>.</strong>(点，句号)在正则表达式中用来表示除了”新行”之外的所有字符。所以模式 <strong>^.5$</strong> 与任何两个字符的、以数字5结尾和以其他非”新行”字符开头的字符串匹配。模式 <strong>.</strong> 可以匹配任何字符串，<strong>换行符（\n、\r）除外</strong>。</p><p>PHP的正则表达式有一些内置的通用字符簇，列表如下：</p><table><thead><tr><th align="left">字符簇</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">[[:alpha:]]</td><td align="left">任何字母</td></tr><tr><td align="left">[[:digit:]]</td><td align="left">任何数字</td></tr><tr><td align="left">[[:alnum:]]</td><td align="left">任何字母和数字</td></tr><tr><td align="left">[[:space:]]</td><td align="left">任何空白字符</td></tr><tr><td align="left">[[:upper:]]</td><td align="left">任何大写字母</td></tr><tr><td align="left">[[:lower:]]</td><td align="left">任何小写字母</td></tr><tr><td align="left">[[:punct:]]</td><td align="left">任何标点符号</td></tr><tr><td align="left">[[:xdigit:]]</td><td align="left">任何16进制的数字，相当于[0-9a-fA-F]</td></tr></tbody></table><h3 id="确定重复出现"><a href="#确定重复出现" class="headerlink" title="确定重复出现"></a>确定重复出现</h3><p>到现在为止，你已经知道如何去匹配一个字母或数字，但更多的情况下，可能要匹配一个单词或一组数字。一个单词有若干个字母组成，一组数字有若干个单数组成。跟在字符或字符簇后面的花括号({})用来确定前面的内容的重复出现的次数。</p><table><thead><tr><th align="left">字符簇</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">^[a-zA-Z_]$</td><td align="left">所有的字母和下划线</td></tr><tr><td align="left">^[[:alpha:]]{3}$</td><td align="left">所有的3个字母的单词</td></tr><tr><td align="left">^a$</td><td align="left">字母a</td></tr><tr><td align="left">^a{4}$</td><td align="left">aaaa</td></tr><tr><td align="left">^a{2,4}$</td><td align="left">aa,aaa或aaaa</td></tr><tr><td align="left">^a{1,3}$</td><td align="left">a,aa或aaa</td></tr><tr><td align="left">^a{2,}$</td><td align="left">包含多于两个a的字符串</td></tr><tr><td align="left">^a{2,}</td><td align="left">如：aardvark和aaab，但apple不行</td></tr><tr><td align="left">a{2,}</td><td align="left">如：baad和aaa，但Nantucket不行</td></tr><tr><td align="left">\t{2}</td><td align="left">两个制表符</td></tr><tr><td align="left">.{2}</td><td align="left">所有的两个字符</td></tr></tbody></table><p>这些例子描述了花括号的三种不同的用法。一个数字 <strong>{x}</strong> 的意思是<strong>前面的字符或字符簇只出现x次</strong> ；一个数字加逗号 <strong>{x,}</strong> 的意思是<strong>前面的内容出现x或更多的次数</strong> ；两个数字用逗号分隔的数字 <strong>{x,y}</strong> 表示 <strong>前面的内容至少出现x次，但不超过y次</strong>。我们可以把模式扩展到更多的单词或数字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">^[a-zA-Z0-9_]&#123;1,&#125;$      // 所有包含一个以上的字母、数字或下划线的字符串 </span><br><span class="line">^[1-9][0-9]&#123;0,&#125;$        // 所有的正整数 </span><br><span class="line">^\-&#123;0,1&#125;[0-9]&#123;1,&#125;$      // 所有的整数 </span><br><span class="line">^[-]?[0-9]+\.?[0-9]+$   // 所有的浮点数</span><br></pre></td></tr></table></figure><p>最后一个例子不太好理解，是吗？这么看吧：以一个可选的负号 (<strong>[-]?</strong>) 开头 (<strong>^</strong>)、跟着1个或更多的数字(<strong>[0-9]+</strong>)、和一个小数点(<strong>.</strong>)再跟上1个或多个数字**([0-9]+<strong>)，并且后面没有其他任何东西(</strong>$**)。下面你将知道能够使用的更为简单的方法。</p><p>特殊字符 <strong>?</strong> 与 <strong>{0,1}</strong> 是相等的，它们都代表着： <strong>0个或1个前面的内容</strong> 或 <strong>前面的内容是可选的</strong> 。所以刚才的例子可以简化为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\-?[0-9]&#123;1,&#125;\.?[0-9]&#123;1,&#125;$</span><br></pre></td></tr></table></figure><p>特殊字符 ***** 与 <strong>{0,}</strong> 是相等的，它们都代表着 <strong>0 个或多个前面的内容</strong> 。最后，字符 <strong>+</strong> 与 <strong>{1,}</strong> 是相等的，表示 <strong>1 个或多个前面的内容</strong> ，所以上面的4个例子可以写成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">^[a-zA-Z0-9_]+$      // 所有包含一个以上的字母、数字或下划线的字符串 </span><br><span class="line">^[1-9][0-9]*$        // 所有的正整数 </span><br><span class="line">^\-?[0-9]+$          // 所有的整数 </span><br><span class="line">^[-]?[0-9]+(\.[0-9]+)?$ // 所有的浮点数</span><br></pre></td></tr></table></figure><h2 id="正则表达式-示例"><a href="#正则表达式-示例" class="headerlink" title="正则表达式 - 示例"></a>正则表达式 - 示例</h2><h3 id="简单表达式"><a href="#简单表达式" class="headerlink" title="简单表达式"></a>简单表达式</h3><p>正则表达式的最简单形式是在搜索字符串中匹配其本身的单个普通字符。例如，单字符模式，如 A，不论出现在搜索字符串中的何处，它总是匹配字母 A。下面是一些单字符正则表达式模式的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/a/</span><br><span class="line">/7/</span><br><span class="line">/M/</span><br></pre></td></tr></table></figure><p>可以将许多单字符组合起来以形成大的表达式。例如，以下正则表达式组合了单字符表达式：a、7 和 M。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/a7M/</span><br></pre></td></tr></table></figure><p>请注意，没有串联运算符。只须在一个字符后面键入另一个字符。</p><h3 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h3><p>点号 <strong>.</strong> 匹配字符串中的各种打印或非打印字符，除了换行符 <strong>\n</strong> 和 <strong>\r</strong>。下面的正则表达式匹配 aac、abc、acc、adc 等等，以及 a1c、a2c、a-c 和 a#c：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/a.c/</span><br></pre></td></tr></table></figure><p>若要匹配包含文件名的字符串，而句点 <strong>.</strong> 是输入字符串的组成部分，请在正则表达式中的句点前面加反斜杠 *<em>*</em> 字符。举例来说明，下面的正则表达式匹配 filename.ext：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/filename\.ext/</span><br></pre></td></tr></table></figure><p>这些表达式只让您匹配”任何”单个字符。可能需要匹配列表中的特定字符组。例如，可能需要查找用数字表示的章节标题（Chapter 1、Chapter 2 等等）。</p><p>用户名可以包含以下几种字符：</p><ul><li>1、26 个大小写英文字母表示为 <strong>a-zA-Z</strong>。</li><li>2、数字表示为 <strong>0-9</strong>。</li><li>3、下划线表示为 **_**。</li><li>4、中划线表示为 **-**。</li></ul><p>用户名由若干个字母、数字、下划线和中划线组成，所以需要用到 <strong>+</strong> 表示 <strong>1</strong> 次或多次出现。</p><p>根据以上条件得出用户名的表达式可以为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a-zA-Z0-9_-]+</span><br></pre></td></tr></table></figure><p>实例</p><p>var str &#x3D; “abc123-<em>def”; var patt &#x3D; &#x2F;[a-zA-Z0-9</em>-]+&#x2F;; document.write(str.match(patt));</p><p>以下标记的文本是获得的匹配的表达式：</p><p><strong>abc123-_def</strong></p><p>如果不需要中划线则为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a-zA-Z0-9_]+</span><br></pre></td></tr></table></figure><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>var str &#x3D; “abc123def”; var str2 &#x3D; “abc123_def”; var patt &#x3D; &#x2F;[a-zA-Z0-9_]+&#x2F;; document.write(str.match(patt)); document.write(str2.match(patt));</p><p>以下标记的文本是获得的匹配的表达式：</p><p><strong>abc123def</strong><br><strong>abc123_def</strong></p><p>匹配 HTML 标签及内容</p><p>以下正则表达式用于匹配 iframe 标签：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/&lt;iframe(([\s\S])*?)&lt;\/iframe&gt;/</span><br></pre></td></tr></table></figure><p>其他标签的匹配可以替换 <strong>iframe</strong> 。</p><p>匹配 id&#x3D;”mydiv” 的 div 标签：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/&lt;div id=&quot;mydiv&quot;(([\s\S])*?)&lt;\/div&gt;/</span><br></pre></td></tr></table></figure><p>匹配所有 img 标签：</p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>&#x2F;&lt;img.*?src&#x3D;”(.*?)”.*?/?&gt;&#x2F;gi</p><h3 id="中括号表达式"><a href="#中括号表达式" class="headerlink" title="中括号表达式"></a>中括号表达式</h3><p>若要创建匹配字符组的一个列表，请在方括号 <strong>[ ]</strong> 内放置一个或更多单个字符。当字符括在中括号内时，该列表称为”中括号表达式”。与在任何别的位置一样，普通字符在中括号内表示其本身，即，它在输入文本中匹配一次其本身。大多数特殊字符在中括号表达式内出现时失去它们的意义。不过也有一些例外，如：</p><ul><li>如果 <strong>]</strong> 字符不是第一项，它结束一个列表。若要匹配列表中的 <strong>]</strong> 字符，请将它放在第一位，紧跟在开始 <strong>[</strong> 后面。</li></ul><p>括在中括号表达式中的字符只匹配处于正则表达式中该位置的单个字符。以下正则表达式匹配 Chapter 1、Chapter 2、Chapter 3、Chapter 4 和 Chapter 5：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Chapter [12345]/</span><br></pre></td></tr></table></figure><p>请注意，单词 Chapter 和后面的空格的位置相对于中括号内的字符是固定的。中括号表达式指定的只是匹配紧跟在单词 Chapter 和空格后面的单个字符位置的字符集。这是第九个字符位置。</p><p>若要使用范围代替字符本身来表示匹配字符组，请使用连字符 <strong>-</strong> 将范围中的开始字符和结束字符分开。单个字符的字符值确定范围内的相对顺序。下面的正则表达式包含范围表达式，该范围表达式等效于上面显示的中括号中的列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Chapter [1-5]/</span><br></pre></td></tr></table></figure><p>当以这种方式指定范围时，开始值和结束值两者都包括在范围内。注意，还有一点很重要，按 Unicode 排序顺序，开始值必须在结束值的前面。</p><p>若要在中括号表达式中包括连字符，请采用下列方法之一：</p><ul><li><p>用反斜杠将它转义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[\-]</span><br></pre></td></tr></table></figure></li><li><p>将连字符放在中括号列表的开始或结尾。下面的表达式匹配所有小写字母和连字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[-a-z]</span><br><span class="line">[a-z-]</span><br></pre></td></tr></table></figure></li><li><p>创建一个范围，在该范围中，开始字符值小于连字符，而结束字符值等于或大于连字符。下面的两个正则表达式都满足这一要求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[!--]</span><br><span class="line">[!-~]</span><br></pre></td></tr></table></figure></li></ul><p>若要查找不在列表或范围内的所有字符，请将插入符号 <strong>^</strong> 放在列表的开头。如果插入字符出现在列表中的其他任何位置，则它匹配其本身。下面的正则表达式匹配1、2、3、4 或 5 之外的任何数字和字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Chapter [^12345]/</span><br></pre></td></tr></table></figure><p>在上面的示例中，表达式在第九个位置匹配 1、2、3、4 或 5 之外的任何数字和字符。这样，例如，Chapter 7 就是一个匹配项，Chapter 9 也是一个匹配项。</p><p>上面的表达式可以使用连字符 <strong>-</strong> 来表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Chapter [^1-5]/</span><br></pre></td></tr></table></figure><p>中括号表达式的典型用途是指定任何大写或小写字母或任何数字的匹配。下面的表达式指定这样的匹配：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[A-Za-z0-9]/</span><br></pre></td></tr></table></figure><h3 id="替换和分组"><a href="#替换和分组" class="headerlink" title="替换和分组"></a>替换和分组</h3><p>替换使用 <strong>|</strong> 字符来允许在两个或多个替换选项之间进行选择。例如，可以扩展章节标题正则表达式，以返回比章标题范围更广的匹配项。但是，这并不象您可能认为的那样简单。替换匹配 <strong>|</strong> 字符任一侧最大的表达式。</p><p>您可能认为，下面的表达式匹配出现在行首和行尾、后面跟一个或两个数字的 Chapter 或 Section：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^Chapter|Section [1-9][0-9]&#123;0,1&#125;$/</span><br></pre></td></tr></table></figure><p>很遗憾，上面的正则表达式要么匹配行首的单词 Chapter，要么匹配行尾的单词 Section 及跟在其后的任何数字。如果输入字符串是 Chapter 22，那么上面的表达式只匹配单词 Chapter。如果输入字符串是 Section 22，那么该表达式匹配 Section 22。</p><p>若要使正则表达式更易于控制，可以使用括号来限制替换的范围，即，确保它只应用于两个单词 Chapter 和 Section。但是，括号也用于创建子表达式，并可能捕获它们以供以后使用，这一点在有关反向引用的那一节讲述。通过在上面的正则表达式的适当位置添加括号，就可以使该正则表达式匹配 Chapter 1 或 Section 3。</p><p>下面的正则表达式使用括号来组合 Chapter 和 Section，以便表达式正确地起作用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^(Chapter|Section) [1-9][0-9]&#123;0,1&#125;$/</span><br></pre></td></tr></table></figure><p>尽管这些表达式正常工作，但 Chapter|Section 周围的括号还将捕获两个匹配字中的任一个供以后使用。由于在上面的表达式中只有一组括号，因此，只有一个被捕获的”子匹配项”。</p><p>在上面的示例中，您只需要使用括号来组合单词 Chapter 和 Section 之间的选择。若要防止匹配被保存以备将来使用，请在括号内正则表达式模式之前放置 **?:**。下面的修改提供相同的能力而不保存子匹配项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^(?:Chapter|Section) [1-9][0-9]&#123;0,1&#125;$/</span><br></pre></td></tr></table></figure><p>除 <strong>?:</strong> 元字符外，两个其他非捕获元字符创建被称为”预测先行”匹配的某些内容。正向预测先行使用 <strong>?&#x3D;</strong> 指定，它匹配处于括号中匹配正则表达式模式的起始点的搜索字符串。反向预测先行使用 <strong>?!</strong> 指定，它匹配处于与正则表达式模式不匹配的字符串的起始点的搜索字符串。</p><p>例如，假设您有一个文档，该文档包含指向 Windows 3.1、Windows 95、Windows 98 和 Windows NT 的引用。再进一步假设，您需要更新该文档，将指向 Windows 95、Windows 98 和 Windows NT 的所有引用更改为 Windows 2000。下面的正则表达式（这是一个正向预测先行的示例）匹配 Windows 95、Windows 98 和 Windows NT：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Windows(?=95 |98 |NT )/</span><br></pre></td></tr></table></figure><p>找到一处匹配后，紧接着就在匹配的文本（不包括预测先行中的字符）之后搜索下一处匹配。例如，如果上面的表达式匹配 Windows 98，将在 Windows 之后而不是在 98 之后继续搜索。</p><h3 id="其他示例"><a href="#其他示例" class="headerlink" title="其他示例"></a>其他示例</h3><p>下面列出一些正则表达式示例：</p><table><thead><tr><th align="left">正则表达式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>/\b([a-z]+) \1\b/gi</code></td><td align="left">一个单词连续出现的位置。</td></tr><tr><td align="left"><code>/(\w+):\/\/([^/:]+)(:\d*)?([^# ]*)/</code></td><td align="left">匹配一个 URL 解析为协议、域、端口及相对路径。</td></tr><tr><td align="left">&#96;&#x2F;^(?:Chapter</td><td align="left">Section) [1-9][0-9]{0,1}$&#x2F;&#96;</td></tr><tr><td align="left"><code>/[-a-z]/</code></td><td align="left">a 至 z 共 26个 字母再加一个 <strong>-</strong> 号。</td></tr><tr><td align="left"><code>/ter\b/</code></td><td align="left">可匹配 chapter，而不能匹配 terminal。</td></tr><tr><td align="left"><code>/\Bapt/</code></td><td align="left">可匹配 chapter，而不能匹配 aptitude。</td></tr><tr><td align="left">&#96;&#x2F;Windows(?&#x3D;95</td><td align="left">98</td></tr><tr><td align="left"><code>/^\s*$/</code></td><td align="left">匹配空行。</td></tr><tr><td align="left"><code>/\d&#123;2&#125;-\d&#123;5&#125;/</code></td><td align="left">验证由两位数字、一个连字符再加 5 位数字组成的 ID 号。</td></tr><tr><td align="left"><code>&lt;[a-zA-Z]+.*?&gt;([\s\S]*?)&lt;/[a-zA-Z]*?&gt;</code></td><td align="left">匹配 HTML 标记。</td></tr></tbody></table><table><thead><tr><th align="left">正则表达式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>hello</code></td><td align="left">匹配 {hello}</td></tr><tr><td align="left">&#96;gray</td><td align="left">grey&#96;</td></tr><tr><td align="left">&#96;gr(a</td><td align="left">e)y&#96;</td></tr><tr><td align="left"><code>gr[ae]y</code></td><td align="left">匹配 {gray, grey}</td></tr><tr><td align="left"><code>b[aeiou]bble</code></td><td align="left">匹配 {babble, bebble, bibble, bobble, bubble}</td></tr><tr><td align="left">&#96;[b-chm-pP]at</td><td align="left">ot&#96;</td></tr><tr><td align="left"><code>colou?r</code></td><td align="left">匹配 {color, colour}</td></tr><tr><td align="left">&#96;rege(x(es)?</td><td align="left">xps?)&#96;</td></tr><tr><td align="left"><code>go*gle</code></td><td align="left">匹配 {ggle, gogle, google, gooogle, goooogle, …}</td></tr><tr><td align="left"><code>go+gle</code></td><td align="left">匹配 {gogle, google, gooogle, goooogle, …}</td></tr><tr><td align="left"><code>g(oog)+le</code></td><td align="left">匹配 {google, googoogle, googoogoogle, googoogoogoogle, …}</td></tr><tr><td align="left"><code>z&#123;3&#125;</code></td><td align="left">匹配 {zzz}</td></tr><tr><td align="left"><code>z&#123;3,6&#125;</code></td><td align="left">匹配 {zzz, zzzz, zzzzz, zzzzzz}</td></tr><tr><td align="left"><code>z&#123;3,&#125;</code></td><td align="left">匹配 {zzz, zzzz, zzzzz, …}</td></tr><tr><td align="left"><code>[Bb]rainf\*\*k</code></td><td align="left">匹配 {Brainf<strong>k, brainf</strong>k}</td></tr><tr><td align="left"><code>\d</code></td><td align="left">匹配 {0,1,2,3,4,5,6,7,8,9}</td></tr><tr><td align="left"><code>1\d&#123;10&#125;</code></td><td align="left">匹配 11 个数字，以 1 开头</td></tr><tr><td align="left">&#96;[2-9]</td><td align="left">[12]\d</td></tr><tr><td align="left"><code>Hello\nworld</code></td><td align="left">匹配 Hello 后跟换行符，后跟 world</td></tr><tr><td align="left"><code>\d+(\.\d\d)?</code></td><td align="left">包含一个正整数或包含两位小数位的浮点数。</td></tr><tr><td align="left"><code>[^*@#]</code></td><td align="left">排除 *、@ 、# 三个特色符号</td></tr><tr><td align="left"><code>//[^\r\n]*[\r\n]</code></td><td align="left">匹配 <strong>&#x2F;&#x2F;</strong> 开头的注释</td></tr><tr><td align="left"><code>^dog</code></td><td align="left">匹配以 “dog” 开始</td></tr><tr><td align="left"><code>dog$</code></td><td align="left">匹配以 “dog” 结尾</td></tr><tr><td align="left"><code>^dog$</code></td><td align="left">is exactly “dog”</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2023/03/11/02.22-Git/"/>
      <url>/2023/03/11/02.22-Git/</url>
      
        <content type="html"><![CDATA[<h2 id="Git-Commit"><a href="#Git-Commit" class="headerlink" title="Git Commit"></a>Git Commit</h2><p><code>git commit &lt;&gt;</code></p><p>Git 仓库中的提交记录保存的是你的目录下所有文件的快照，就像是把整个目录复制，然后再粘贴一样，但比复制粘贴优雅许多！</p><p>Git 希望提交记录尽可能地轻量，因此在你每次进行提交时，它并不会盲目地复制整个目录。条件允许的情况下，它会将当前版本与仓库中的上一个版本进行对比，并把所有的差异打包到一起作为一个提交记录。</p><p>Git 还保存了提交的历史记录。这也是为什么大多数提交记录的上面都有父节点的原因 —— 我们会在图示中用箭头来表示这种关系。对于项目组的成员来说，维护提交历史对大家都有好处。</p><p>关于提交记录太深入的东西咱们就不再继续探讨了，现在你可以把提交记录看作是项目的快照。提交记录非常轻量，可以快速地在这些提交记录之间切换！</p><h2 id="Git-Branch"><a href="#Git-Branch" class="headerlink" title="Git Branch"></a>Git Branch</h2><p><code>git branch newInmage</code></p><p>Git 的分支也非常轻量。它们只是简单地指向某个提交纪录 —— 仅此而已。所以许多 Git 爱好者传颂：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">早建分支！多用分支！</span><br></pre></td></tr></table></figure><p>这是因为即使创建再多的分支也不会造成储存或内存上的开销，并且按逻辑分解工作到不同的分支要比维护那些特别臃肿的分支简单多了。</p><p>在将分支和提交记录结合起来后，我们会看到两者如何协作。现在只要记住使用分支其实就相当于在说：“我想基于这个提交以及它所有的父提交进行新的工作。”</p><p>现在咱们告诉 Git 我们想要切换到新的分支上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;name&gt;</span><br></pre></td></tr></table></figure><p>下面的命令会让我们在提交修改之前先切换到新的分支上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b bugFix</span><br></pre></td></tr></table></figure><p><em>注意：在 Git 2.23 版本中，引入了一个名为 git switch 的新命令，最终会取代 git checkout，因为 checkout 作为单个命令有点超载（它承载了很多独立的功能）。 由于现在很多人还无法使用 switch，本次课程仍然使用 checkout 而不是 switch， 但是如果你想尝试一下新命令，我们的应用也是支持的！并且你可以从这里学到更多关于新命令的内容。</em></p><h2 id="分支与合并"><a href="#分支与合并" class="headerlink" title="分支与合并"></a>分支与合并</h2><p>太好了! 我们已经知道如何提交以及如何使用分支了。接下来咱们看看如何将两个分支合并到一起。就是说我们新建一个分支，在其上开发某个新功能，开发完成后再合并回主线。</p><p>咱们先来看一下第一种方法 —— <code>git merge</code>。在 Git 中合并两个分支时会产生一个特殊的提交记录，它有两个父节点。翻译成自然语言相当于：“我要把这两个父节点本身及它们所有的祖先都包含进来。”</p><h2 id="Git-Rebase"><a href="#Git-Rebase" class="headerlink" title="Git Rebase"></a>Git Rebase</h2><p>第二种合并分支的方法是 <code>git rebase</code>。Rebase 实际上就是<strong>取出一系列</strong>的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。</p><p>Rebase 的优势就是可以创造更线性的提交历史，这听上去有些难以理解。如果只允许使用 Rebase 的话，代码库的提交历史将会变得异常清晰。</p><hr><h2 id="在提交树上移动"><a href="#在提交树上移动" class="headerlink" title="在提交树上移动"></a>在提交树上移动</h2><p>在接触 Git 更高级功能之前，我们有必要先学习在你项目的提交树上前后移动的几种方法。</p><p>一旦熟悉了如何在 Git 提交树上移动，你驾驭其它命令的能力也将水涨船高！</p><h2 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h2><p>我们首先看一下 “HEAD”。 HEAD 是一个对当前检出记录的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录。</p><p>HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。</p><p>HEAD 通常情况下是指向分支名的（如 bugFix）。在你提交时，改变了 bugFix 的状态，这一变化通过 HEAD 变得可见。</p><p>如果想看 HEAD 指向，可以通过 <code>cat .git/HEAD</code> 查看， 如果 HEAD 指向的是一个引用，还可以用 <code>git symbolic-ref HEAD</code> 查看它的指向。但是该程序不支持这两个命令）</p><h3 id="分离的-HEAD"><a href="#分离的-HEAD" class="headerlink" title="分离的 HEAD"></a>分离的 HEAD</h3><p>分离的 HEAD 就是让其指向了某个具体的提交记录而不是分支名。在命令执行之前的状态如下所示：</p><p>HEAD -&gt; main -&gt; C1</p><p>HEAD 指向 main， main 指向 C1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout C1</span><br></pre></td></tr></table></figure><h2 id="相对引用"><a href="#相对引用" class="headerlink" title="相对引用(^)"></a>相对引用(^)</h2><p>通过指定提交记录哈希值的方式在 Git 中移动不太方便。在实际应用时，并没有像本程序中这么漂亮的可视化提交树供你参考，所以你就不得不用 <code>git log</code> 来查查看提交记录的哈希值。</p><p>并且哈希值在真实的 Git 世界中也会更长（译者注：基于 SHA-1，共 40 位）。例如前一关的介绍中的提交记录的哈希值可能是 <code>fed2da64c0efc5293610bdd892f82a58e8cbc5d8</code>。舌头都快打结了吧…</p><p>比较令人欣慰的是，Git 对哈希的处理很智能。你只需要提供能够唯一标识提交记录的前几个字符即可。因此我可以仅输入<code>fed2</code> 而不是上面的一长串字符。</p><p>正如我前面所说，通过哈希值指定提交记录很不方便，所以 Git 引入了相对引用。这个就很厉害了!</p><p>使用相对引用的话，你就可以从一个易于记忆的地方（比如 <code>bugFix</code> 分支或 <code>HEAD</code>）开始计算。</p><p>相对引用非常给力，这里我介绍两个简单的用法：</p><ul><li><p>使用 <code>^</code> 向上移动 1 个提交记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout bugFix^</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>~&lt;num&gt;</code> 向上移动多个提交记录，如 <code>~3</code></p><ul><li>该操作符后面可以跟一个数字（可选，不跟数字时与 <code>^</code> 相同，向上移动一次），指定向上移动多少次。</li></ul></li></ul><blockquote><p>首先看看操作符 (^)。把这个符号加在引用名称的后面，表示让 Git 寻找指定提交记录的父提交。</p><p>所以 <code>main^</code> 相当于“<code>main</code> 的父节点”。</p><p><code>main^^</code> 是 <code>main</code> 的第二个父节点</p></blockquote><h3 id="强制修改分支位置"><a href="#强制修改分支位置" class="headerlink" title="强制修改分支位置"></a>强制修改分支位置</h3><p>你现在是相对引用的专家了，现在用它来做点实际事情。</p><p>我使用相对引用最多的就是<strong>移动分支</strong>。可以直接使用 <code>-f</code> 选项让分支指向另一个提交。例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -f main HEAD~3</span><br></pre></td></tr></table></figure><p>上面的命令会将 main 分支强制指向 HEAD 的第 3 级父提交。</p><h2 id="撤销变更"><a href="#撤销变更" class="headerlink" title="撤销变更"></a>撤销变更</h2><p>在 Git 里撤销变更的方法很多。和提交一样，撤销变更由底层部分（暂存区的独立文件或者片段）和上层部分（变更到底是通过哪种方式被撤销的）组成。我们这个应用主要关注的是后者。</p><p>主要有两种方法用来撤销变更 —— 一是 <code>git reset</code>，还有就是 <code>git revert</code>。接下来咱们逐个进行讲解。</p><blockquote><p>git reset （适用于本地Git，“改写历史”，将该提交撤销）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD^</span><br></pre></td></tr></table></figure><p>git revert （适用于远程Git，创建一个新的提交，该提交与上一个提交相同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert HEAD</span><br></pre></td></tr></table></figure></blockquote><h2 id="整理提交记录"><a href="#整理提交记录" class="headerlink" title="整理提交记录"></a>整理提交记录</h2><p>到现在我们已经学习了 Git 的基础知识 —— 提交、分支以及在提交树上移动。 这些概念涵盖了 Git 90% 的功能，同样也足够满足开发者的日常需求</p><p>然而, 剩余的 10% 在处理复杂的工作流时(或者当你陷入困惑时）可能就显得尤为重要了。接下来要讨论的这个话题是“整理提交记录” —— 开发人员有时会说“我想要把这个提交放到这里, 那个提交放到刚才那个提交的后面”, 而接下来就讲的就是它的实现方式，非常清晰、灵活，还很生动。</p><h2 id="Git-Cherry-pick"><a href="#Git-Cherry-pick" class="headerlink" title="Git Cherry-pick"></a>Git Cherry-pick</h2><p>本系列的第一个命令是 <code>git cherry-pick</code>, 命令形式为:</p><ul><li><code>git cherry-pick &lt;提交号&gt;...</code></li></ul><p>如果你想将一些提交复制到当前所在的位置（<code>HEAD</code>）下面的话， Cherry-pick 是最直接的方式了。我个人非常喜欢 <code>cherry-pick</code>，因为它特别简单。(需要知道提交复制的哈希值)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick C2 C4</span><br></pre></td></tr></table></figure><h2 id="交互式的-rebase"><a href="#交互式的-rebase" class="headerlink" title="交互式的 rebase"></a>交互式的 rebase</h2><p>当你知道你所需要的提交记录（<strong>并且</strong>还知道这些提交记录的哈希值）时, 用 cherry-pick 再好不过了 —— 没有比这更简单的方式了。</p><p>但是如果你不清楚你想要的提交记录的哈希值呢? 幸好 Git 帮你想到了这一点, 我们可以利用交互式的 rebase —— 如果你想从一系列的提交记录中找到想要的记录, 这就是最好的方法了</p><p>交互式 rebase 指的是使用带参数 <code>--interactive</code> 的 rebase 命令, 简写为 <code>-i</code></p><p>如果你在命令后增加了这个选项, Git 会打开一个 UI 界面并列出将要被复制到目标分支的备选提交记录，它还会显示每个提交记录的哈希值和提交说明，提交说明有助于你理解这个提交进行了哪些更改。</p><p>在实际使用时，所谓的 UI 窗口一般会在文本编辑器 —— 如 Vim —— 中打开一个文件。 考虑到课程的初衷，我弄了一个对话框来模拟这些操作。</p><p>当 rebase UI界面打开时, 你能做3件事:</p><ul><li>调整提交记录的顺序（通过鼠标拖放来完成）</li><li>删除你不想要的提交（通过切换 <code>pick</code> 的状态来完成，关闭就意味着你不想要这个提交记录）</li><li>合并提交。 遗憾的是由于某种逻辑的原因，我们的课程不支持此功能，因此我不会详细介绍这个操作。简而言之，它允许你把多个提交记录合并成一个。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~2   //调整C2,C3顺序</span><br><span class="line">git commit --amend</span><br><span class="line">git rebase -i HEAD^^   //调整C2&#x27;&#x27;,C3&#x27;顺序</span><br><span class="line">git branch -f main C3&#x27;&#x27; //将mian移动到C3&#x27;&#x27;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\文小幺\AppData\Roaming\Typora\typora-user-images\1677212072398.png" alt="1677212072398"></p><h2 id="本地栈式提交"><a href="#本地栈式提交" class="headerlink" title="本地栈式提交"></a>本地栈式提交</h2><p>来看一个在开发中经常会遇到的情况：我正在解决某个特别棘手的 Bug，为了便于调试而在代码中添加了一些调试命令并向控制台打印了一些信息。</p><p>这些调试和打印语句都在它们各自的提交记录里。最后我终于找到了造成这个 Bug 的根本原因，解决掉以后觉得沾沾自喜！</p><p>最后就差把 <code>bugFix</code> 分支里的工作合并回 <code>main</code> 分支了。你可以选择通过 fast-forward 快速合并到 <code>main</code> 分支上，但这样的话 <code>main</code> 分支就会包含我这些调试语句了。你肯定不想这样，应该还有更好的方式……</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git cherry-pick C2  //将C2复制到HEAD位置下</span><br><span class="line">git branch -f main C1 //将mian移动到C1</span><br><span class="line">git cherry-pick C2&#x27; C3 //将C2&#x27; C3复制到HEAD位置下</span><br></pre></td></tr></table></figure><p><img src="C:\Users\文小幺\AppData\Roaming\Typora\typora-user-images\1677211933318.png" alt="1677211933318"></p><h2 id="Git-Tags"><a href="#Git-Tags" class="headerlink" title="Git Tags"></a>Git Tags</h2><p>相信通过前面课程的学习你已经发现了：分支很容易被人为移动，并且当有新的提交时，它也会移动。分支很容易被改变，大部分分支还只是临时的，并且还一直在变。</p><p>你可能会问了：有没有什么可以<em>永远</em>指向某个提交记录的标识呢，比如软件发布新的大版本，或者是修正一些重要的 Bug 或是增加了某些新特性，有没有比分支更好的可以永远指向这些提交的方法呢？</p><p>当然有了！Git 的 tag 就是干这个用的啊，它们可以（在某种程度上 —— 因为标签可以被删除后重新在另外一个位置创建同名的标签）永久地将某个特定的提交命名为里程碑，然后就可以像分支一样引用了。</p><p>更难得的是，它们并不会随着新的提交而移动。你也不能切换到某个标签上面进行修改提交，它就像是提交树上的一个锚点，标识了某个特定的位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag v1 C1</span><br><span class="line">git checkout v1 //指向v1，HEAD会分离，变为指向C1</span><br></pre></td></tr></table></figure><h2 id="高级应用"><a href="#高级应用" class="headerlink" title="高级应用"></a>高级应用</h2><h3 id="Git-Describe（描述位置）"><a href="#Git-Describe（描述位置）" class="headerlink" title="Git Describe（描述位置）"></a>Git Describe（描述位置）</h3><p>由于标签在代码库中起着“锚点”的作用，Git 还为此专门设计了一个命令用来<strong>描述</strong>离你最近的锚点（也就是标签），它就是 <code>git describe</code>！</p><p>Git Describe 能帮你在提交历史中移动了多次以后找到方向；当你用 <code>git bisect</code>（一个查找产生 Bug 的提交记录的指令）找到某个提交记录时，或者是当你坐在你那刚刚度假回来的同事的电脑前时， 可能会用到这个命令。</p><p><code>git describe</code> 的语法是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git describe &lt;ref&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;ref&gt;</code> 可以是任何能被 Git 识别成提交记录的引用，如果你没有指定的话，Git 会以你目前所检出的位置（<code>HEAD</code>）。</p><p>它输出的结果是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tag&gt;_&lt;numCommits&gt;_g&lt;hash&gt;</span><br></pre></td></tr></table></figure><p><code>tag</code> 表示的是离 <code>ref</code> 最近的标签， <code>numCommits</code> 是表示这个 <code>ref</code> 与 <code>tag</code> 相差有多少个提交记录， <code>hash</code> 表示的是你所给定的 <code>ref</code> 所表示的提交记录哈希值的前几位。</p><p>当 <code>ref</code> 提交记录上有某个标签时，则只输出标签名称</p><h3 id="多分支-rebase"><a href="#多分支-rebase" class="headerlink" title="多分支 rebase"></a>多分支 rebase</h3><p>哥们儿，我们准备了很多分支！咱们把这些分支 rebase 到 main 上吧。</p><p>但是你的领导给你提了点要求 —— 他们希望得到有序的提交历史，也就是我们最终的结果应该是 <code>C6&#39;</code> 在 <code>C7&#39;</code> 上面， <code>C5&#39;</code> 在 <code>C6&#39;</code> 上面，依此类推。</p><p>即使你搞砸了也没关系，用 <code>reset</code> 命令就可以重新开始了。记得看看我们提供的答案，看你能否使用更少的命令来完成任务！</p><h3 id="选择父提交记录"><a href="#选择父提交记录" class="headerlink" title="选择父提交记录"></a>选择父提交记录</h3><p>操作符 <code>^</code> 与 <code>~</code> 符一样，后面也可以跟一个数字。</p><p>但是该操作符后面的数字与 <code>~</code> 后面的不同，并不是用来指定向上返回几代，而是指定合并提交记录的某个父提交。还记得前面提到过的一个合并提交有两个父提交吧，所以遇到这样的节点时该选择哪条路径就不是很清晰了。</p><p>Git 默认选择合并提交的“第一个”父提交，在操作符 <code>^</code> 后跟一个数字可以改变这一默认行为。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout HEAD^2 //选择另一个父提交</span><br><span class="line">git checkout HEAD~^2~2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git branch bugWork HEAD~^2~</span><br></pre></td></tr></table></figure><h3 id="纠缠不清的分支"><a href="#纠缠不清的分支" class="headerlink" title="纠缠不清的分支"></a>纠缠不清的分支</h3><p>现在我们的 <code>main</code> 分支是比 <code>one</code>、<code>two</code> 和 <code>three</code> 要多几个提交。出于某种原因，我们需要把 <code>main</code> 分支上最近的几次提交做不同的调整后，分别添加到各个的分支上。</p><p><code>one</code> 需要重新排序并删除 <code>C5</code>，<code>two</code> 仅需要重排排序，而 <code>three</code> 只需要提交一次。</p><p>慢慢来，你会找到答案的 —— 记得通关之后用 <code>show solution</code> 看看我们的答案哦。</p><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p>远程仓库并不复杂, 在如今的云计算盛行的世界很容易把远程仓库想象成一个富有魔力的东西, 但实际上它们只是你的仓库在另个一台计算机上的拷贝。你可以通过因特网与这台计算机通信 —— 也就是增加或是获取提交记录</p><p>话虽如此, 远程仓库却有一系列强大的特性</p><ul><li>首先也是最重要的的点, 远程仓库是一个强大的备份。本地仓库也有恢复文件到指定版本的能力, 但所有的信息都是保存在本地的。有了远程仓库以后，即使丢失了本地所有数据, 你仍可以通过远程仓库拿回你丢失的数据。</li><li>还有就是, 远程让代码社交化了! 既然你的项目被托管到别的地方了, 你的朋友可以更容易地为你的项目做贡献(或者拉取最新的变更)</li></ul><p>现在用网站来对远程仓库进行可视化操作变得越发流行了(像 <a href="https://github.com/">GitHub</a>), 但远程仓库<strong>永远</strong>是这些工具的顶梁柱, 因此理解其概念非常的重要!</p><p><img src="C:\Users\文小幺\AppData\Roaming\Typora\typora-user-images\1677217191030.png" alt="1677217191030"></p><h2 id="本地创建远程仓库的拷贝git-clone"><a href="#本地创建远程仓库的拷贝git-clone" class="headerlink" title="本地创建远程仓库的拷贝git clone"></a>本地创建远程仓库的拷贝git clone</h2><p>直到现在, 教程都聚焦于<strong>本地</strong>仓库的操作（branch、merge、rebase 等等）。但我们现在需要学习远程仓库的操作 —— 我们需要一个配置这种环境的命令, 它就是 <code>git clone</code>。 从技术上来讲，<code>git clone</code> 命令<strong>在真实的环境下的作用是在本地创建一个远程仓库的拷贝（比如从 github.com）</strong>。 但在我们的教程中使用这个命令会有一些不同 —— 它会在远程创建一个你本地仓库的副本。显然这和真实命令的意思刚好相反，但是它帮咱们把本地仓库和远程仓库关联到了一起，在教程中就凑合着用吧。</p><p>你可能注意到的第一个事就是在我们的本地仓库多了一个名为 <code>o/main</code> 的分支, 这种类型的分支就叫<strong>远程</strong>分支。由于远程分支的特性导致其拥有一些特殊属性。</p><p>远程分支反映了远程仓库(在你上次和它通信时)的<strong>状态</strong>。这会有助于你理解本地的工作与公共工作的差别 —— 这是你与别人分享工作成果前至关重要的一步.</p><p>远程分支有一个特别的属性，在你检出时自动进入分离 HEAD 状态。Git 这么做是出于不能直接在这些分支上进行操作的原因, 你必须在别的地方完成你的工作, （更新了远程分支之后）再用远程分享你的工作成果。</p><h3 id="为什么有-o-？"><a href="#为什么有-o-？" class="headerlink" title="为什么有 o/？"></a>为什么有 <code>o/</code>？</h3><p>你可能想问这些远程分支的前面的 <code>o/</code> 是什么意思呢？好吧, 远程分支有一个命名规范 —— 它们的格式是:</p><ul><li><code>&lt;remote name&gt;/&lt;branch name&gt;</code></li></ul><p>因此，如果你看到一个名为 <code>o/main</code> 的分支，那么这个分支就叫 <code>main</code>，远程仓库的名称就是 <code>o</code>。</p><p>大多数的开发人员会将它们主要的远程仓库命名为 <code>origin</code>，并不是 <code>o</code>。这是因为当你用 <code>git clone</code> 某个仓库时，Git 已经帮你把远程仓库的名称设置为 <code>origin</code> 了</p><p>不过 <code>origin</code> 对于我们的 UI 来说太长了，因此不得不使用简写 <code>o</code> :) 但是要记住, 当你使用真正的 Git 时, 你的远程仓库默认为 <code>origin</code>!</p><p>检出远程分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout o/main</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><p>正如你所见，Git 变成了分离 HEAD 状态，当添加新的提交时 <code>o/main</code> 也不会更新。这是因为 <code>o/main</code> 只有在远程仓库中相应的分支更新了以后才会更新。</p><h2 id="Git-Fetch"><a href="#Git-Fetch" class="headerlink" title="Git Fetch"></a>Git Fetch</h2><p>Git 远程仓库相当的操作实际可以归纳为两点：向远程仓库传输数据以及从远程仓库获取数据。既然我们能与远程仓库同步，那么就可以分享任何能被 Git 管理的更新（因此可以分享代码、文件、想法、情书等等）。</p><p>本节课我们将学习如何从远程仓库获取数据 —— 命令如其名，它就是 <code>git fetch</code>。</p><p>你会看到当我们从远程仓库获取数据时, 远程分支也会更新以反映最新的远程仓库。在上一节课程中我们已经提及过这一点了。</p><h3 id="git-fetch-做了些什么"><a href="#git-fetch-做了些什么" class="headerlink" title="git fetch 做了些什么"></a>git fetch 做了些什么</h3><p><code>git fetch</code> 完成了仅有的但是很重要的两步:</p><ul><li>从远程仓库下载本地仓库中缺失的提交记录</li><li>更新远程分支指针(如 <code>o/main</code>)</li></ul><p><code>git fetch</code> 实际上将本地仓库中的远程分支更新成了远程仓库相应分支最新的状态。</p><p>如果你还记得上一节课程中我们说过的，远程分支反映了远程仓库在你<strong>最后一次与它通信时</strong>的状态，<code>git fetch</code> 就是你与远程仓库通信的方式了！希望我说的够明白了，你已经了解 <code>git fetch</code> 与远程分支之间的关系了吧。</p><p><code>git fetch</code> 通常通过互联网（使用 <code>http://</code> 或 <code>git://</code> 协议) 与远程仓库通信</p><h3 id="git-fetch-不会做的事"><a href="#git-fetch-不会做的事" class="headerlink" title="git fetch 不会做的事"></a>git fetch 不会做的事</h3><p><code>git fetch</code> 并不会改变你本地仓库的状态。它不会更新你的 <code>main</code> 分支，也不会修改你磁盘上的文件。</p><p>理解这一点很重要，因为许多开发人员误以为执行了 <code>git fetch</code> 以后，他们本地仓库就与远程仓库同步了。<strong>它可能已经将进行这一操作所需的所有数据都下载了下来，但是并没有修改你本地的文件</strong>。我们在后面的课程中将会讲解能完成该操作的命令 :D</p><p>所以, 你可以将 <code>git fetch</code> 的理解为单纯的下载操作。</p><p>Previous</p><h2 id="Git-Pull"><a href="#Git-Pull" class="headerlink" title="Git Pull"></a>Git Pull</h2><p>既然我们已经知道了如何用 <code>git fetch</code> 获取远程的数据, 现在我们学习如何将这些变化更新到我们的工作当中。</p><p>其实有很多方法的 —— 当远程分支中有新的提交时，你可以像合并本地分支那样来合并远程分支。也就是说就是你可以执行以下命令:</p><ul><li><code>git cherry-pick o/main</code></li><li><code>git rebase o/main</code></li><li><code>git merge o/main</code></li><li>等等</li></ul><p>实际上，由于先抓取更新再合并到本地分支这个流程很常用，因此 Git 提供了一个专门的命令来完成这两个操作。它就是我们要讲的 <code>git pull</code>。</p><p>相当于<code>git fetch</code> + <code>git merge</code></p><h2 id="Git-Push"><a href="#Git-Push" class="headerlink" title="Git Push"></a>Git Push</h2><p>OK，我们已经学过了如何从远程仓库获取更新并合并到本地的分支当中。这非常棒……但是我如何与大家分享<strong>我的</strong>成果呢？</p><p>嗯，上传自己分享内容与下载他人的分享刚好相反，那与 <code>git pull</code> 相反的命令是什么呢？<code>git push</code>！</p><p><code>git push</code> 负责将<strong>你的</strong>变更上传到指定的远程仓库，并在远程仓库上合并你的新提交记录。一旦 <code>git push</code> 完成, 你的朋友们就可以从这个远程仓库下载你分享的成果了！</p><p>你可以将 <code>git push</code> 想象成发布你成果的命令。它有许多应用技巧，稍后我们会了解到，但是咱们还是先从基础的开始吧……</p><p><em>注意 —— git push 不带任何参数时的行为与 Git 的一个名为 push.default 的配置有关。它的默认值取决于你正使用的 Git 的版本，但是在教程中我们使用的是 upstream。 这没什么太大的影响，但是在你的项目中进行推送之前，最好检查一下这个配置。</em></p><h2 id="偏离的工作"><a href="#偏离的工作" class="headerlink" title="偏离的工作"></a>偏离的工作</h2><p>现在我们已经知道了如何从其它地方 <code>pull</code> 提交记录，以及如何 <code>push</code> 我们自己的变更。看起来似乎没什么难度，但是为何还会让人们如此困惑呢？</p><p>困难来自于远程库提交历史的<strong>偏离</strong>。在讨论这个问题的细节前，我们先来看一个例子……</p><p>假设你周一克隆了一个仓库，然后开始研发某个新功能。到周五时，你新功能开发测试完毕，可以发布了。但是 —— 天啊！你的同事这周写了一堆代码，还改了许多你的功能中使用的 API，这些变动会导致你新开发的功能变得不可用。但是他们已经将那些提交推送到远程仓库了，因此你的工作就变成了基于项目<strong>旧版</strong>的代码，与远程仓库最新的代码不匹配了。</p><p>这种情况下, <code>git push</code> 就不知道该如何操作了。如果你执行 <code>git push</code>，Git 应该让远程仓库回到星期一那天的状态吗？还是直接在新代码的基础上添加你的代码，亦或由于你的提交已经过时而直接忽略你的提交？</p><p>因为这情况（历史偏离）有许多的不确定性，Git 是不会允许你 <code>push</code> 变更的。实际上它会强制你先合并远程最新的代码，然后才能分享你的工作。</p><p>那该如何解决这个问题呢？很简单，你需要做的就是使你的工作基于最新的远程分支。</p><p>有许多方法做到这一点呢，不过最直接的方法就是通过 rebase 调整你的工作。咱们继续，看看怎么 rebase！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br><span class="line">git rebase o/main   //此时HEAD指向main</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p><img src="C:\Users\文小幺\AppData\Roaming\Typora\typora-user-images\1677235955468.png" alt="1677235955468"></p><p>使用git merge</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br><span class="line">git merge o/main</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p><img src="C:\Users\文小幺\AppData\Roaming\Typora\typora-user-images\1677235932088.png" alt="1677235932088"></p><p>前面提到<code>git pull</code>相当于<code>git fetch</code>+<code>git merge</code>的简写</p><p><code>git pull --rebase</code>相当于<code>git fetch</code> + <code>git rebase</code>的简写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p><img src="C:\Users\文小幺\AppData\Roaming\Typora\typora-user-images\1677236138909.png" alt="1677236138909"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p><img src="C:\Users\文小幺\AppData\Roaming\Typora\typora-user-images\1677236187510.png" alt="1677236187510"></p><h2 id="远程服务器拒绝-Remote-Rejected"><a href="#远程服务器拒绝-Remote-Rejected" class="headerlink" title="远程服务器拒绝!(Remote Rejected)"></a>远程服务器拒绝!(Remote Rejected)</h2><p>如果你是在一个大的合作团队中工作, 很可能是main被锁定了, 需要一些Pull Request流程来合并修改。如果你直接提交(commit)到本地main, 然后试图推送(push)修改, 你将会收到这样类似的信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">! [远程服务器拒绝] main -&gt; main (TF402455: 不允许推送(push)这个分支; 你必须使用pull request来更新这个分支.)</span><br></pre></td></tr></table></figure><h3 id="为什么会被拒绝"><a href="#为什么会被拒绝" class="headerlink" title="为什么会被拒绝?"></a>为什么会被拒绝?</h3><p>远程服务器拒绝直接推送(push)提交到main, 因为策略配置要求 pull requests 来提交更新.</p><p>你应该按照流程,新建一个分支, 推送(push)这个分支并申请pull request,但是你忘记并直接提交给了main.现在你卡住并且无法推送你的更新.</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>新建一个分支feature, 推送到远程服务器. 然后reset你的main分支和远程服务器保持一致, 否则下次你pull并且他人的提交和你冲突的时候就会有问题.</p><h2 id="合并特性分支"><a href="#合并特性分支" class="headerlink" title="合并特性分支"></a>合并特性分支</h2><p>既然你应该很熟悉 fetch、pull、push 了，现在我们要通过一个新的工作流来测试你的这些技能。</p><p>在大型项目中开发人员通常会在（从 <code>main</code> 上分出来的）特性分支上工作，工作完成后只做一次集成。这跟前面课程的描述很相像（把 side 分支推送到远程仓库），不过本节我们会深入一些.</p><p>但是有些开发人员只在 main 上做 push、pull —— 这样的话 main 总是最新的，始终与远程分支 (o&#x2F;main) 保持一致。</p><p>对于接下来这个工作流，我们集成了两个步骤：</p><ul><li>将特性分支集成到 <code>main</code> 上</li><li>推送并更新远程分支</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="为什么不用-merge-呢"><a href="#为什么不用-merge-呢" class="headerlink" title="为什么不用 merge 呢?"></a>为什么不用 merge 呢?</h2><p>为了 push 新变更到远程仓库，你要做的就是<strong>包含</strong>远程仓库中最新变更。意思就是只要你的本地分支包含了远程分支（如 <code>o/main</code>）中的最新变更就可以了，至于具体是用 rebase 还是 merge，并没有限制。</p><p>那么既然没有规定限制，为何前面几节都在着重于 rebase 呢？为什么在操作远程分支时不喜欢用 <code>merge</code> 呢？</p><p>在开发社区里，有许多关于 merge 与 rebase 的讨论。以下是关于 rebase 的优缺点：</p><p>优点:</p><ul><li>Rebase 使你的提交树变得很干净, 所有的提交都在一条线上</li></ul><p>缺点:</p><ul><li>Rebase 修改了提交树的历史</li></ul><p>比如, 提交 C1 可以被 rebase 到 C3 之后。这看起来 C1 中的工作是在 C3 之后进行的，但实际上是在 C3 之前。</p><p>一些开发人员喜欢保留提交历史，因此更偏爱 merge。而其他人（比如我自己）可能更喜欢干净的提交树，于是偏爱 rebase。仁者见仁，智者见智。 :D</p><h2 id="远程跟踪分支"><a href="#远程跟踪分支" class="headerlink" title="远程跟踪分支"></a>远程跟踪分支</h2><p>在前几节课程中有件事儿挺神奇的，Git 好像知道 <code>main</code> 与 <code>o/main</code> 是相关的。当然这些分支的名字是相似的，可能会让你觉得是依此将远程分支 main 和本地的 main 分支进行了关联。这种关联在以下两种情况下可以清楚地得到展示：</p><ul><li>pull 操作时, 提交记录会被先下载到 o&#x2F;main 上，之后再合并到本地的 main 分支。隐含的合并目标由这个关联确定的。</li><li>push 操作时, 我们把工作从 <code>main</code> 推到远程仓库中的 <code>main</code> 分支(同时会更新远程分支 <code>o/main</code>) 。这个推送的目的地也是由这种关联确定的！</li></ul><h3 id="远程跟踪"><a href="#远程跟踪" class="headerlink" title="远程跟踪"></a>远程跟踪</h3><p>直接了当地讲，<code>main</code> 和 <code>o/main</code> 的关联关系就是由分支的“remote tracking”属性决定的。<code>main</code> 被设定为跟踪 <code>o/main</code> —— 这意味着为 <code>main</code> 分支指定了推送的目的地以及拉取后合并的目标。</p><p>你可能想知道 <code>main</code> 分支上这个属性是怎么被设定的，你并没有用任何命令指定过这个属性呀！好吧, 当你克隆仓库的时候, Git 就自动帮你把这个属性设置好了。</p><p>当你克隆时, Git 会为远程仓库中的每个分支在本地仓库中创建一个远程分支（比如 <code>o/main</code>）。然后再创建一个跟踪远程仓库中活动分支的本地分支，默认情况下这个本地分支会被命名为 <code>main</code>。</p><p>克隆完成后，你会得到一个本地分支（如果没有这个本地分支的话，你的目录就是“空白”的），但是可以查看远程仓库中所有的分支（如果你好奇心很强的话）。这样做对于本地仓库和远程仓库来说，都是最佳选择。</p><p>这也解释了为什么会在克隆的时候会看到下面的输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local branch &quot;main&quot; set to track remote branch &quot;o/main&quot;</span><br></pre></td></tr></table></figure><h3 id="我能自己指定这个属性吗？"><a href="#我能自己指定这个属性吗？" class="headerlink" title="我能自己指定这个属性吗？"></a>我能自己指定这个属性吗？</h3><p>当然可以啦！你可以让任意分支跟踪 <code>o/main</code>, 然后该分支会像 <code>main</code> 分支一样得到隐含的 push 目的地以及 merge 的目标。 这意味着你可以在分支 <code>totallyNotMain</code> 上执行 <code>git push</code>，将工作推送到远程仓库的 <code>main</code> 分支上。</p><p>有两种方法设置这个属性，第一种就是通过远程分支检出一个新的分支，执行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b totallyNotMain o/main</span><br></pre></td></tr></table></figure><p>就可以创建一个名为 <code>totallyNotMain</code> 的分支，它跟踪远程分支 <code>o/main</code>。</p><h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><p>另一种设置远程追踪分支的方法就是使用：<code>git branch -u</code> 命令，执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -u o/main foo</span><br></pre></td></tr></table></figure><p>这样 <code>foo</code> 就会跟踪 <code>o/main</code> 了。如果当前就在 foo 分支上, 还可以省略 foo：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -u o/main</span><br></pre></td></tr></table></figure><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a><code>git push</code></h2><p>在远程跟踪课程中，你已经学到了 Git 是通过当前检出分支的属性来确定远程仓库以及要 push 的目的地的。这是未指定参数时的行为，我们可以为 push 指定参数，语法是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;remote&gt; &lt;place&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;place&gt;</code> 参数是什么意思呢？我们稍后会深入其中的细节, 先看看例子, 这个命令是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin main</span><br></pre></td></tr></table></figure><p>把这个命令翻译过来就是：</p><p><em>切到本地仓库中的“main”分支，获取所有的提交，再到远程仓库“origin”中找到“main”分支，将远程仓库中没有的提交记录都添加上去，搞定之后告诉我。</em></p><p>我们通过“place”参数来告诉 Git 提交记录来自于 main, 要推送到远程仓库中的 main。它实际就是要同步的两个仓库的位置。</p><p>需要注意的是，因为我们通过指定参数告诉了 Git 所有它需要的信息, 所以它就忽略了我们所检出的分支的属性！</p><h2 id="lt-place-gt-参数详解"><a href="#lt-place-gt-参数详解" class="headerlink" title="&lt;place&gt;参数详解"></a><code>&lt;place&gt;</code>参数详解</h2><p>还记得之前课程说的吧，当为 git push 指定 place 参数为 <code>main</code> 时，我们同时指定了提交记录的来源和去向。</p><p>你可能想问 —— 如果来源和去向分支的名称不同呢？比如你想把本地的 <code>foo</code> 分支推送到远程仓库中的 <code>bar</code> 分支。</p><p>哎，很遗憾 Git 做不到…… 开个玩笑，别当真！当然是可以的啦 :) Git 拥有超强的灵活性（有点过于灵活了）</p><p>接下来咱们看看是怎么做的……</p><p>要同时为源和目的地指定 <code>&lt;place&gt;</code> 的话，只需要用冒号 <code>:</code> 将二者连起来就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;source&gt;:&lt;destination&gt;</span><br></pre></td></tr></table></figure><p>这个参数实际的值是个 refspec，“refspec” 是一个自造的词，意思是 Git 能识别的位置（比如分支 <code>foo</code> 或者 <code>HEAD~1</code>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin foo^:main</span><br></pre></td></tr></table></figure><p><img src="C:\Users\文小幺\AppData\Roaming\Typora\typora-user-images\1677245019965.png" alt="1677245019965"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin foo:main //远程中的main跟着本地的foo走</span><br><span class="line">git push origin main^:foo //远程中的foo跟着本地的main走，且不可用 C5:foo  因为远程中没有C5</span><br></pre></td></tr></table></figure><p><img src="C:\Users\文小幺\AppData\Roaming\Typora\typora-user-images\1677245846582.png" alt="1677245846582"></p><h2 id="Git-fetch-的参数"><a href="#Git-fetch-的参数" class="headerlink" title="Git fetch 的参数"></a>Git fetch 的参数</h2><p>我们刚学习了 git push 的参数，很酷的 <code>&lt;place&gt;</code> 参数，还有用冒号分隔的 refspecs（<code>&lt;source&gt;:&lt;destination&gt;</code>）。 这些参数可以用于 <code>git fetch</code> 吗？</p><p>你猜中了！<code>git fetch</code> 的参数和 <code>git push</code> 极其相似。他们的概念是相同的，只是<strong>方向相反</strong>罢了（因为现在你是下载，而非上传）</p><h3 id="lt-place-gt-参数"><a href="#lt-place-gt-参数" class="headerlink" title="&lt;place&gt; 参数"></a><code>&lt;place&gt;</code> 参数</h3><p>如果你像如下命令这样为 git fetch 设置 的话：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin foo</span><br></pre></td></tr></table></figure><p>Git 会到远程仓库的 <code>foo</code> 分支上，然后获取所有本地不存在的提交，放到本地的 <code>o/foo</code> 上。</p><p><img src="C:\Users\文小幺\AppData\Roaming\Typora\typora-user-images\1677246055243.png" alt="1677246055243"></p><p>你可能会好奇 —— 为何 Git 会将新提交放到 <code>o/foo</code> 而不是放到我本地的 foo 分支呢？之前不是说这样的 参数就是同时应用于本地和远程的位置吗？</p><p>好吧, 本例中 Git 做了一些特殊处理，因为你可能在 foo 分支上的工作还未完成，你也不想弄乱它。还记得在 <code>git fetch</code> 课程里我们讲到的吗 —— 它不会更新你的本地的非远程分支, 只是下载提交记录（这样, 你就可以对远程分支进行检查或者合并了）。</p><p>“如果我们指定 <code>&lt;source&gt;:&lt;destination&gt;</code> 会发生什么呢？”</p><p>如果你觉得直接更新本地分支很爽，那你就用冒号分隔的 refspec 吧。不过，你不能在当前检出的分支上干这个事，但是其它分支是可以的。</p><p>这里有一点是需要注意的 —— <code>source</code> 现在指的是远程仓库中的位置，而 <code>&lt;destination&gt;</code> 才是要放置提交的本地仓库的位置。它与 git push 刚好相反，这是可以讲的通的，因为我们在往相反的方向传送数据。</p><p>理论上虽然行的通，但开发人员很少这么做。我在这里介绍它主要是为了从概念上说明 <code>fetch</code> 和 <code>push</code> 的相似性，只是方向相反罢了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin main^:foo // 从远程main^拉取到foo</span><br><span class="line">git fetch origin foo:main</span><br><span class="line">git checkout foo</span><br><span class="line">git merge main</span><br></pre></td></tr></table></figure><h3 id="古怪的-lt-source-gt"><a href="#古怪的-lt-source-gt" class="headerlink" title="古怪的 &lt;source&gt;"></a>古怪的 <code>&lt;source&gt;</code></h3><p>Git 有两种关于 <code>&lt;source&gt;</code> 的用法是比较诡异的，即你可以在 git push 或 git fetch 时不指定任何 <code>source</code>，方法就是仅保留冒号和 destination 部分，source 部分留空。</p><ul><li><code>git push origin :side</code>   删除远程仓库中的side</li><li><code>git fetch origin :bugFix</code> 在本地仓库创建一个bugFix</li></ul><h2 id="Git-pull-参数"><a href="#Git-pull-参数" class="headerlink" title="Git pull 参数"></a>Git pull 参数</h2><p>既然你已经掌握关于 <code>git fetch</code> 和 <code>git push</code> 参数的方方面面了，关于 git pull 几乎没有什么可以讲的了 :)</p><p>因为 git pull 到头来就是 fetch 后跟 merge 的缩写。你可以理解为用同样的参数执行 git fetch，然后再 merge 你所抓取到的提交记录。</p><p>还可以和其它更复杂的参数一起使用, 来看一些例子:</p><p>以下命令在 Git 中是等效的:</p><p><code>git pull origin foo</code> 相当于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin foo; git merge o/foo</span><br></pre></td></tr></table></figure><p>还有…</p><p><code>git pull origin bar~1:bugFix</code> 相当于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin bar~1:bugFix; git merge bugFix</span><br></pre></td></tr></table></figure><p>看到了? git pull 实际上就是 fetch + merge 的缩写, git pull 唯一关注的是提交最终合并到哪里（也就是为 git fetch 所提供的 destination 参数）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull origin bar:foo</span><br><span class="line">git pull origin main:side</span><br></pre></td></tr></table></figure><p><img src="C:\Users\文小幺\AppData\Roaming\Typora\typora-user-images\1677247112388.png" alt="1677247112388"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
